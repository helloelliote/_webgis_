# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"An object with a globally unique `ID`."
interface Node {
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

type ADetail implements Node {
  "Reads a single `AFacility` that is related to this `ADetail`."
  aFacilityByFacUid: AFacility
  catFun: Selection
  catImp: Selection
  catPos: Selection
  catTyp: Selection
  etcTrf: Selection
  etcTrh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaPxm: Selection
  evaRoa: Selection
  evaStt: Selection
  evaSur: Selection
  facGap: BigFloat
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String!
  facWid: BigFloat
  fldDmg: Selection
  fldWal: Selection
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  rivLow: BigFloat
  rivMid: BigFloat
  rivUpp: BigFloat
  secCol: Int
  secDia: BigFloat
  secFlr: Selection
  secHgt: BigFloat
  secWid: BigFloat
  strDmg: Selection
  strHol: Selection
  strOld: Selection
  strReb: Selection
}

"A connection to a list of `ADetail` values."
type ADetailsConnection {
  "A list of edges which contains the `ADetail` and cursor to aid in pagination."
  edges: [ADetailsEdge!]!
  "A list of `ADetail` objects."
  nodes: [ADetail!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `ADetail` you could get from the connection."
  totalCount: Int!
}

"A `ADetail` edge in the connection."
type ADetailsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `ADetail` at the end of the edge."
  node: ADetail!
}

"A connection to a list of `AFacility` values."
type AFacilitiesConnection {
  "A list of edges which contains the `AFacility` and cursor to aid in pagination."
  edges: [AFacilitiesEdge!]!
  "A list of `AFacility` objects."
  nodes: [AFacility!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `AFacility` you could get from the connection."
  totalCount: Int!
}

"A `AFacility` edge in the connection."
type AFacilitiesEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `AFacility` at the end of the edge."
  node: AFacility!
}

type AFacility implements Node {
  "Reads a single `ADetail` that is related to this `AFacility`."
  aDetailByFacUid: ADetail
  "Reads a single `ARiskEvaluation` that is related to this `AFacility`."
  aRiskEvaluationByFacUid: ARiskEvaluation
  benTxt: String
  catCde: Selection
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String!
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
  typCde: [Selection]
  typTxt: String
}

type ARiskEvaluation implements Node {
  "Reads a single `AFacility` that is related to this `ARiskEvaluation`."
  aFacilityByFacUid: AFacility
  column1: Int!
  column10: Int!
  column2: Int!
  column3: Int!
  column4: Int!
  column5: Int!
  column6: Int!
  column7: Int!
  column8: Int!
  column9: Int!
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

"A connection to a list of `ARiskEvaluation` values."
type ARiskEvaluationsConnection {
  "A list of edges which contains the `ARiskEvaluation` and cursor to aid in pagination."
  edges: [ARiskEvaluationsEdge!]!
  "A list of `ARiskEvaluation` objects."
  nodes: [ARiskEvaluation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `ARiskEvaluation` you could get from the connection."
  totalCount: Int!
}

"A `ARiskEvaluation` edge in the connection."
type ARiskEvaluationsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `ARiskEvaluation` at the end of the edge."
  node: ARiskEvaluation!
}

type BBasin implements Node {
  columnName: String
  columnName2: String
  columnName3: String
  columnName4: String
  columnName5: String
  columnName6: BigFloat
  facNam: String
  facUid: String!
  facUml: String!
  geom: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

"A connection to a list of `BBasin` values."
type BBasinsConnection {
  "A list of edges which contains the `BBasin` and cursor to aid in pagination."
  edges: [BBasinsEdge!]!
  "A list of `BBasin` objects."
  nodes: [BBasin!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `BBasin` you could get from the connection."
  totalCount: Int!
}

"A `BBasin` edge in the connection."
type BBasinsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `BBasin` at the end of the edge."
  node: BBasin!
}

type BDetail implements Node {
  "Reads a single `BFacility` that is related to this `BDetail`."
  bFacilityByFacUid: BFacility
  bnkHgtl: BigFloat
  bnkHgtm: BigFloat
  bnkHgtu: BigFloat
  bnkStll: Selection
  bnkStlm: Selection
  bnkStlu: Selection
  bnkStrl: Selection
  bnkStrm: Selection
  bnkStru: Selection
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  crnWdll: BigFloat
  crnWdlm: BigFloat
  crnWdlu: BigFloat
  crnWdrl: BigFloat
  crnWdrm: BigFloat
  crnWdru: BigFloat
  dmgLifl: Selection
  dmgLifm: Selection
  dmgLifu: Selection
  dmgProl: Selection
  dmgProm: Selection
  dmgProu: Selection
  dmgTxtl: String
  dmgTxtm: String
  dmgTxtu: String
  dorPasl: Selection
  dorPasm: Selection
  dorPasu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  facUid: String!
  fldCdel: Selection
  fldCdem: Selection
  fldCdeu: Selection
  fldTxtl: String
  fldTxtm: String
  fldTxtu: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  revMall: Selection
  revMalm: Selection
  revMalu: Selection
  revMarl: Selection
  revMarm: Selection
  revMaru: Selection
  revStll: Selection
  revStlm: Selection
  revStlu: Selection
  revStrl: Selection
  revStrm: Selection
  revStru: Selection
  rivChgl: Selection
  rivChgm: Selection
  rivChgu: Selection
  rivDepl: Selection
  rivDepm: Selection
  rivDepu: Selection
  rivDmgl: Selection
  rivDmgm: Selection
  rivDmgu: Selection
  rivPltl: Selection
  rivPltm: Selection
  rivPltu: Selection
  rivPosl: Selection
  rivPosm: Selection
  rivPosu: Selection
  rivWidl: BigFloat
  rivWidm: BigFloat
  rivWidu: BigFloat
}

"A connection to a list of `BDetail` values."
type BDetailsConnection {
  "A list of edges which contains the `BDetail` and cursor to aid in pagination."
  edges: [BDetailsEdge!]!
  "A list of `BDetail` objects."
  nodes: [BDetail!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `BDetail` you could get from the connection."
  totalCount: Int!
}

"A `BDetail` edge in the connection."
type BDetailsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `BDetail` at the end of the edge."
  node: BDetail!
}

"A connection to a list of `BFacility` values."
type BFacilitiesConnection {
  "A list of edges which contains the `BFacility` and cursor to aid in pagination."
  edges: [BFacilitiesEdge!]!
  "A list of `BFacility` objects."
  nodes: [BFacility!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `BFacility` you could get from the connection."
  totalCount: Int!
}

"A `BFacility` edge in the connection."
type BFacilitiesEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `BFacility` at the end of the edge."
  node: BFacility!
}

type BFacility implements Node {
  "Reads a single `BDetail` that is related to this `BFacility`."
  bDetailByFacUid: BDetail
  "Reads a single `BRiskEvaluation` that is related to this `BFacility`."
  bRiskEvaluationByFacUid: BRiskEvaluation
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String!
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

type BRiskEvaluation implements Node {
  "Reads a single `BFacility` that is related to this `BRiskEvaluation`."
  bFacilityByFacUid: BFacility
  column10L: Int!
  column10M: Int!
  column10U: Int!
  column1L: Int!
  column1M: Int!
  column1U: Int!
  column2L: Int!
  column2M: Int!
  column2U: Int!
  column3L: Int!
  column3M: Int!
  column3U: Int!
  column4L: Int!
  column4M: Int!
  column4U: Int!
  column5L: Int!
  column5M: Int!
  column5U: Int!
  column6L: Int!
  column6M: Int!
  column6U: Int!
  column7L: Int!
  column7M: Int!
  column7U: Int!
  column8L: Int!
  column8M: Int!
  column8U: Int!
  column9L: Int!
  column9M: Int!
  column9U: Int!
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

"A connection to a list of `BRiskEvaluation` values."
type BRiskEvaluationsConnection {
  "A list of edges which contains the `BRiskEvaluation` and cursor to aid in pagination."
  edges: [BRiskEvaluationsEdge!]!
  "A list of `BRiskEvaluation` objects."
  nodes: [BRiskEvaluation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `BRiskEvaluation` you could get from the connection."
  totalCount: Int!
}

"A `BRiskEvaluation` edge in the connection."
type BRiskEvaluationsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `BRiskEvaluation` at the end of the edge."
  node: BRiskEvaluation!
}

type CDetail implements Node {
  "Reads a single `CFacility` that is related to this `CDetail`."
  cFacilityByFacUid: CFacility
  catImp: Selection
  depStt: Selection
  etcEnv: Selection
  etcFsh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaSur: Selection
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String!
  funMch: Selection
  funStt: Selection
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  strBod: Selection
  strFlr: Selection
  strHzd: Selection
  strJnt: Selection
  strWal: Selection
}

"A connection to a list of `CDetail` values."
type CDetailsConnection {
  "A list of edges which contains the `CDetail` and cursor to aid in pagination."
  edges: [CDetailsEdge!]!
  "A list of `CDetail` objects."
  nodes: [CDetail!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `CDetail` you could get from the connection."
  totalCount: Int!
}

"A `CDetail` edge in the connection."
type CDetailsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `CDetail` at the end of the edge."
  node: CDetail!
}

"A connection to a list of `CFacility` values."
type CFacilitiesConnection {
  "A list of edges which contains the `CFacility` and cursor to aid in pagination."
  edges: [CFacilitiesEdge!]!
  "A list of `CFacility` objects."
  nodes: [CFacility!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `CFacility` you could get from the connection."
  totalCount: Int!
}

"A `CFacility` edge in the connection."
type CFacilitiesEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `CFacility` at the end of the edge."
  node: CFacility!
}

type CFacility implements Node {
  benTxt: String
  "Reads a single `CDetail` that is related to this `CFacility`."
  cDetailByFacUid: CDetail
  "Reads a single `CRiskEvaluation` that is related to this `CFacility`."
  cRiskEvaluationByFacUid: CRiskEvaluation
  catCde: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String!
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

type CRiskEvaluation implements Node {
  "Reads a single `CFacility` that is related to this `CRiskEvaluation`."
  cFacilityByFacUid: CFacility
  column1: Int!
  column10: Int!
  column2: Int!
  column3: Int!
  column4: Int!
  column5: Int!
  column6: Int!
  column7: Int!
  column8: Int!
  column9: Int!
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

"A connection to a list of `CRiskEvaluation` values."
type CRiskEvaluationsConnection {
  "A list of edges which contains the `CRiskEvaluation` and cursor to aid in pagination."
  edges: [CRiskEvaluationsEdge!]!
  "A list of `CRiskEvaluation` objects."
  nodes: [CRiskEvaluation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `CRiskEvaluation` you could get from the connection."
  totalCount: Int!
}

"A `CRiskEvaluation` edge in the connection."
type CRiskEvaluationsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `CRiskEvaluation` at the end of the edge."
  node: CRiskEvaluation!
}

"The output of our create `ADetail` mutation."
type CreateADetailPayload {
  "The `ADetail` that was created by this mutation."
  aDetail: ADetail
  "An edge for our `ADetail`. May be used by Relay 1."
  aDetailEdge(
    "The method to use when ordering `ADetail`."
    orderBy: [ADetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ADetailsEdge
  "Reads a single `AFacility` that is related to this `ADetail`."
  aFacilityByFacUid: AFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `AFacility` mutation."
type CreateAFacilityPayload {
  "The `AFacility` that was created by this mutation."
  aFacility: AFacility
  "An edge for our `AFacility`. May be used by Relay 1."
  aFacilityEdge(
    "The method to use when ordering `AFacility`."
    orderBy: [AFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `ARiskEvaluation` mutation."
type CreateARiskEvaluationPayload {
  "Reads a single `AFacility` that is related to this `ARiskEvaluation`."
  aFacilityByFacUid: AFacility
  "The `ARiskEvaluation` that was created by this mutation."
  aRiskEvaluation: ARiskEvaluation
  "An edge for our `ARiskEvaluation`. May be used by Relay 1."
  aRiskEvaluationEdge(
    "The method to use when ordering `ARiskEvaluation`."
    orderBy: [ARiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ARiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `BBasin` mutation."
type CreateBBasinPayload {
  "The `BBasin` that was created by this mutation."
  bBasin: BBasin
  "An edge for our `BBasin`. May be used by Relay 1."
  bBasinEdge(
    "The method to use when ordering `BBasin`."
    orderBy: [BBasinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BBasinsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `BDetail` mutation."
type CreateBDetailPayload {
  "The `BDetail` that was created by this mutation."
  bDetail: BDetail
  "An edge for our `BDetail`. May be used by Relay 1."
  bDetailEdge(
    "The method to use when ordering `BDetail`."
    orderBy: [BDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BDetailsEdge
  "Reads a single `BFacility` that is related to this `BDetail`."
  bFacilityByFacUid: BFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `BFacility` mutation."
type CreateBFacilityPayload {
  "The `BFacility` that was created by this mutation."
  bFacility: BFacility
  "An edge for our `BFacility`. May be used by Relay 1."
  bFacilityEdge(
    "The method to use when ordering `BFacility`."
    orderBy: [BFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `BRiskEvaluation` mutation."
type CreateBRiskEvaluationPayload {
  "Reads a single `BFacility` that is related to this `BRiskEvaluation`."
  bFacilityByFacUid: BFacility
  "The `BRiskEvaluation` that was created by this mutation."
  bRiskEvaluation: BRiskEvaluation
  "An edge for our `BRiskEvaluation`. May be used by Relay 1."
  bRiskEvaluationEdge(
    "The method to use when ordering `BRiskEvaluation`."
    orderBy: [BRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BRiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `CDetail` mutation."
type CreateCDetailPayload {
  "The `CDetail` that was created by this mutation."
  cDetail: CDetail
  "An edge for our `CDetail`. May be used by Relay 1."
  cDetailEdge(
    "The method to use when ordering `CDetail`."
    orderBy: [CDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CDetailsEdge
  "Reads a single `CFacility` that is related to this `CDetail`."
  cFacilityByFacUid: CFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `CFacility` mutation."
type CreateCFacilityPayload {
  "The `CFacility` that was created by this mutation."
  cFacility: CFacility
  "An edge for our `CFacility`. May be used by Relay 1."
  cFacilityEdge(
    "The method to use when ordering `CFacility`."
    orderBy: [CFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `CRiskEvaluation` mutation."
type CreateCRiskEvaluationPayload {
  "Reads a single `CFacility` that is related to this `CRiskEvaluation`."
  cFacilityByFacUid: CFacility
  "The `CRiskEvaluation` that was created by this mutation."
  cRiskEvaluation: CRiskEvaluation
  "An edge for our `CRiskEvaluation`. May be used by Relay 1."
  cRiskEvaluationEdge(
    "The method to use when ordering `CRiskEvaluation`."
    orderBy: [CRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CRiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `DDetail` mutation."
type CreateDDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `DDetail` that was created by this mutation."
  dDetail: DDetail
  "An edge for our `DDetail`. May be used by Relay 1."
  dDetailEdge(
    "The method to use when ordering `DDetail`."
    orderBy: [DDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DDetailsEdge
  "Reads a single `DFacility` that is related to this `DDetail`."
  dFacilityByFacUid: DFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `DFacility` mutation."
type CreateDFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `DFacility` that was created by this mutation."
  dFacility: DFacility
  "An edge for our `DFacility`. May be used by Relay 1."
  dFacilityEdge(
    "The method to use when ordering `DFacility`."
    orderBy: [DFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `DRiskEvaluation` mutation."
type CreateDRiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Reads a single `DFacility` that is related to this `DRiskEvaluation`."
  dFacilityByFacUid: DFacility
  "The `DRiskEvaluation` that was created by this mutation."
  dRiskEvaluation: DRiskEvaluation
  "An edge for our `DRiskEvaluation`. May be used by Relay 1."
  dRiskEvaluationEdge(
    "The method to use when ordering `DRiskEvaluation`."
    orderBy: [DRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DRiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `EDetail` mutation."
type CreateEDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `EDetail` that was created by this mutation."
  eDetail: EDetail
  "An edge for our `EDetail`. May be used by Relay 1."
  eDetailEdge(
    "The method to use when ordering `EDetail`."
    orderBy: [EDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EDetailsEdge
  "Reads a single `EFacility` that is related to this `EDetail`."
  eFacilityByFacUid: EFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `EFacility` mutation."
type CreateEFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `EFacility` that was created by this mutation."
  eFacility: EFacility
  "An edge for our `EFacility`. May be used by Relay 1."
  eFacilityEdge(
    "The method to use when ordering `EFacility`."
    orderBy: [EFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `ERiskEvaluation` mutation."
type CreateERiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Reads a single `EFacility` that is related to this `ERiskEvaluation`."
  eFacilityByFacUid: EFacility
  "The `ERiskEvaluation` that was created by this mutation."
  eRiskEvaluation: ERiskEvaluation
  "An edge for our `ERiskEvaluation`. May be used by Relay 1."
  eRiskEvaluationEdge(
    "The method to use when ordering `ERiskEvaluation`."
    orderBy: [ERiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ERiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `FDetail` mutation."
type CreateFDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `FDetail` that was created by this mutation."
  fDetail: FDetail
  "An edge for our `FDetail`. May be used by Relay 1."
  fDetailEdge(
    "The method to use when ordering `FDetail`."
    orderBy: [FDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FDetailsEdge
  "Reads a single `FFacility` that is related to this `FDetail`."
  fFacilityByFacUid: FFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `FFacility` mutation."
type CreateFFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `FFacility` that was created by this mutation."
  fFacility: FFacility
  "An edge for our `FFacility`. May be used by Relay 1."
  fFacilityEdge(
    "The method to use when ordering `FFacility`."
    orderBy: [FFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `FRiskEvaluation` mutation."
type CreateFRiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Reads a single `FFacility` that is related to this `FRiskEvaluation`."
  fFacilityByFacUid: FFacility
  "The `FRiskEvaluation` that was created by this mutation."
  fRiskEvaluation: FRiskEvaluation
  "An edge for our `FRiskEvaluation`. May be used by Relay 1."
  fRiskEvaluationEdge(
    "The method to use when ordering `FRiskEvaluation`."
    orderBy: [FRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FRiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our create `ViewRegion` mutation."
type CreateViewRegionPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
  "The `ViewRegion` that was created by this mutation."
  viewRegion: ViewRegion
  "An edge for our `ViewRegion`. May be used by Relay 1."
  viewRegionEdge(
    "The method to use when ordering `ViewRegion`."
    orderBy: [ViewRegionsOrderBy!] = [NATURAL]
  ): ViewRegionsEdge
}

type DDetail implements Node {
  catImp: Selection
  "Reads a single `DFacility` that is related to this `DDetail`."
  dFacilityByFacUid: DFacility
  depStt: Selection
  etcEnv: Selection
  etcFsh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaSur: Selection
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String!
  funMch: Selection
  funStt: Selection
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  strBod: Selection
  strFlr: Selection
  strHzd: Selection
  strJnt: Selection
  strWal: Selection
}

"A connection to a list of `DDetail` values."
type DDetailsConnection {
  "A list of edges which contains the `DDetail` and cursor to aid in pagination."
  edges: [DDetailsEdge!]!
  "A list of `DDetail` objects."
  nodes: [DDetail!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `DDetail` you could get from the connection."
  totalCount: Int!
}

"A `DDetail` edge in the connection."
type DDetailsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `DDetail` at the end of the edge."
  node: DDetail!
}

"A connection to a list of `DFacility` values."
type DFacilitiesConnection {
  "A list of edges which contains the `DFacility` and cursor to aid in pagination."
  edges: [DFacilitiesEdge!]!
  "A list of `DFacility` objects."
  nodes: [DFacility!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `DFacility` you could get from the connection."
  totalCount: Int!
}

"A `DFacility` edge in the connection."
type DFacilitiesEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `DFacility` at the end of the edge."
  node: DFacility!
}

type DFacility implements Node {
  benTxt: String
  catCde: String
  "Reads a single `DDetail` that is related to this `DFacility`."
  dDetailByFacUid: DDetail
  "Reads a single `DRiskEvaluation` that is related to this `DFacility`."
  dRiskEvaluationByFacUid: DRiskEvaluation
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String!
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

type DRiskEvaluation implements Node {
  column1: Int!
  column10: Int!
  column2: Int!
  column3: Int!
  column4: Int!
  column5: Int!
  column6: Int!
  column7: Int!
  column8: Int!
  column9: Int!
  "Reads a single `DFacility` that is related to this `DRiskEvaluation`."
  dFacilityByFacUid: DFacility
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

"A connection to a list of `DRiskEvaluation` values."
type DRiskEvaluationsConnection {
  "A list of edges which contains the `DRiskEvaluation` and cursor to aid in pagination."
  edges: [DRiskEvaluationsEdge!]!
  "A list of `DRiskEvaluation` objects."
  nodes: [DRiskEvaluation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `DRiskEvaluation` you could get from the connection."
  totalCount: Int!
}

"A `DRiskEvaluation` edge in the connection."
type DRiskEvaluationsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `DRiskEvaluation` at the end of the edge."
  node: DRiskEvaluation!
}

"The output of our delete `ADetail` mutation."
type DeleteADetailPayload {
  "The `ADetail` that was deleted by this mutation."
  aDetail: ADetail
  "An edge for our `ADetail`. May be used by Relay 1."
  aDetailEdge(
    "The method to use when ordering `ADetail`."
    orderBy: [ADetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ADetailsEdge
  "Reads a single `AFacility` that is related to this `ADetail`."
  aFacilityByFacUid: AFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedADetailNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `AFacility` mutation."
type DeleteAFacilityPayload {
  "The `AFacility` that was deleted by this mutation."
  aFacility: AFacility
  "An edge for our `AFacility`. May be used by Relay 1."
  aFacilityEdge(
    "The method to use when ordering `AFacility`."
    orderBy: [AFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAFacilityNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `ARiskEvaluation` mutation."
type DeleteARiskEvaluationPayload {
  "Reads a single `AFacility` that is related to this `ARiskEvaluation`."
  aFacilityByFacUid: AFacility
  "The `ARiskEvaluation` that was deleted by this mutation."
  aRiskEvaluation: ARiskEvaluation
  "An edge for our `ARiskEvaluation`. May be used by Relay 1."
  aRiskEvaluationEdge(
    "The method to use when ordering `ARiskEvaluation`."
    orderBy: [ARiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ARiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedARiskEvaluationNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `BBasin` mutation."
type DeleteBBasinPayload {
  "The `BBasin` that was deleted by this mutation."
  bBasin: BBasin
  "An edge for our `BBasin`. May be used by Relay 1."
  bBasinEdge(
    "The method to use when ordering `BBasin`."
    orderBy: [BBasinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BBasinsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBBasinNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `BDetail` mutation."
type DeleteBDetailPayload {
  "The `BDetail` that was deleted by this mutation."
  bDetail: BDetail
  "An edge for our `BDetail`. May be used by Relay 1."
  bDetailEdge(
    "The method to use when ordering `BDetail`."
    orderBy: [BDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BDetailsEdge
  "Reads a single `BFacility` that is related to this `BDetail`."
  bFacilityByFacUid: BFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBDetailNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `BFacility` mutation."
type DeleteBFacilityPayload {
  "The `BFacility` that was deleted by this mutation."
  bFacility: BFacility
  "An edge for our `BFacility`. May be used by Relay 1."
  bFacilityEdge(
    "The method to use when ordering `BFacility`."
    orderBy: [BFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBFacilityNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `BRiskEvaluation` mutation."
type DeleteBRiskEvaluationPayload {
  "Reads a single `BFacility` that is related to this `BRiskEvaluation`."
  bFacilityByFacUid: BFacility
  "The `BRiskEvaluation` that was deleted by this mutation."
  bRiskEvaluation: BRiskEvaluation
  "An edge for our `BRiskEvaluation`. May be used by Relay 1."
  bRiskEvaluationEdge(
    "The method to use when ordering `BRiskEvaluation`."
    orderBy: [BRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BRiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBRiskEvaluationNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `CDetail` mutation."
type DeleteCDetailPayload {
  "The `CDetail` that was deleted by this mutation."
  cDetail: CDetail
  "An edge for our `CDetail`. May be used by Relay 1."
  cDetailEdge(
    "The method to use when ordering `CDetail`."
    orderBy: [CDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CDetailsEdge
  "Reads a single `CFacility` that is related to this `CDetail`."
  cFacilityByFacUid: CFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCDetailNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `CFacility` mutation."
type DeleteCFacilityPayload {
  "The `CFacility` that was deleted by this mutation."
  cFacility: CFacility
  "An edge for our `CFacility`. May be used by Relay 1."
  cFacilityEdge(
    "The method to use when ordering `CFacility`."
    orderBy: [CFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCFacilityNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `CRiskEvaluation` mutation."
type DeleteCRiskEvaluationPayload {
  "Reads a single `CFacility` that is related to this `CRiskEvaluation`."
  cFacilityByFacUid: CFacility
  "The `CRiskEvaluation` that was deleted by this mutation."
  cRiskEvaluation: CRiskEvaluation
  "An edge for our `CRiskEvaluation`. May be used by Relay 1."
  cRiskEvaluationEdge(
    "The method to use when ordering `CRiskEvaluation`."
    orderBy: [CRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CRiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCRiskEvaluationNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `DDetail` mutation."
type DeleteDDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `DDetail` that was deleted by this mutation."
  dDetail: DDetail
  "An edge for our `DDetail`. May be used by Relay 1."
  dDetailEdge(
    "The method to use when ordering `DDetail`."
    orderBy: [DDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DDetailsEdge
  "Reads a single `DFacility` that is related to this `DDetail`."
  dFacilityByFacUid: DFacility
  deletedDDetailNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `DFacility` mutation."
type DeleteDFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `DFacility` that was deleted by this mutation."
  dFacility: DFacility
  "An edge for our `DFacility`. May be used by Relay 1."
  dFacilityEdge(
    "The method to use when ordering `DFacility`."
    orderBy: [DFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DFacilitiesEdge
  deletedDFacilityNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `DRiskEvaluation` mutation."
type DeleteDRiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Reads a single `DFacility` that is related to this `DRiskEvaluation`."
  dFacilityByFacUid: DFacility
  "The `DRiskEvaluation` that was deleted by this mutation."
  dRiskEvaluation: DRiskEvaluation
  "An edge for our `DRiskEvaluation`. May be used by Relay 1."
  dRiskEvaluationEdge(
    "The method to use when ordering `DRiskEvaluation`."
    orderBy: [DRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DRiskEvaluationsEdge
  deletedDRiskEvaluationNodeId: ID
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `EDetail` mutation."
type DeleteEDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEDetailNodeId: ID
  "The `EDetail` that was deleted by this mutation."
  eDetail: EDetail
  "An edge for our `EDetail`. May be used by Relay 1."
  eDetailEdge(
    "The method to use when ordering `EDetail`."
    orderBy: [EDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EDetailsEdge
  "Reads a single `EFacility` that is related to this `EDetail`."
  eFacilityByFacUid: EFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `EFacility` mutation."
type DeleteEFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEFacilityNodeId: ID
  "The `EFacility` that was deleted by this mutation."
  eFacility: EFacility
  "An edge for our `EFacility`. May be used by Relay 1."
  eFacilityEdge(
    "The method to use when ordering `EFacility`."
    orderBy: [EFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `ERiskEvaluation` mutation."
type DeleteERiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedERiskEvaluationNodeId: ID
  "Reads a single `EFacility` that is related to this `ERiskEvaluation`."
  eFacilityByFacUid: EFacility
  "The `ERiskEvaluation` that was deleted by this mutation."
  eRiskEvaluation: ERiskEvaluation
  "An edge for our `ERiskEvaluation`. May be used by Relay 1."
  eRiskEvaluationEdge(
    "The method to use when ordering `ERiskEvaluation`."
    orderBy: [ERiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ERiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `FDetail` mutation."
type DeleteFDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFDetailNodeId: ID
  "The `FDetail` that was deleted by this mutation."
  fDetail: FDetail
  "An edge for our `FDetail`. May be used by Relay 1."
  fDetailEdge(
    "The method to use when ordering `FDetail`."
    orderBy: [FDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FDetailsEdge
  "Reads a single `FFacility` that is related to this `FDetail`."
  fFacilityByFacUid: FFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `FFacility` mutation."
type DeleteFFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFFacilityNodeId: ID
  "The `FFacility` that was deleted by this mutation."
  fFacility: FFacility
  "An edge for our `FFacility`. May be used by Relay 1."
  fFacilityEdge(
    "The method to use when ordering `FFacility`."
    orderBy: [FFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our delete `FRiskEvaluation` mutation."
type DeleteFRiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFRiskEvaluationNodeId: ID
  "Reads a single `FFacility` that is related to this `FRiskEvaluation`."
  fFacilityByFacUid: FFacility
  "The `FRiskEvaluation` that was deleted by this mutation."
  fRiskEvaluation: FRiskEvaluation
  "An edge for our `FRiskEvaluation`. May be used by Relay 1."
  fRiskEvaluationEdge(
    "The method to use when ordering `FRiskEvaluation`."
    orderBy: [FRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FRiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

type EDetail implements Node {
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  dmgSewl: Selection
  dmgSewm: Selection
  dmgSewu: Selection
  dmgSubl: Selection
  dmgSubm: Selection
  dmgSubu: Selection
  "Reads a single `EFacility` that is related to this `EDetail`."
  eFacilityByFacUid: EFacility
  etcPosl: Selection
  etcPosm: Selection
  etcPosu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPosl: Selection
  evaPosm: Selection
  evaPosu: Selection
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  evaRivl: Selection
  evaRivm: Selection
  evaRivu: Selection
  facUid: String!
  funFlal: Selection
  funFlam: Selection
  funFlau: Selection
  funPavl: Selection
  funPavm: Selection
  funPavu: Selection
  funUnpl: Selection
  funUnpm: Selection
  funUnpu: Selection
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  strPavl: Selection
  strPavm: Selection
  strPavu: Selection
  strSafl: Selection
  strSafm: Selection
  strSafu: Selection
  strShpl: Selection
  strShpm: Selection
  strShpu: Selection
  strSnkl: Selection
  strSnkm: Selection
  strSnku: Selection
  strWidl: BigFloat
  strWidm: BigFloat
  strWidu: BigFloat
}

"A connection to a list of `EDetail` values."
type EDetailsConnection {
  "A list of edges which contains the `EDetail` and cursor to aid in pagination."
  edges: [EDetailsEdge!]!
  "A list of `EDetail` objects."
  nodes: [EDetail!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `EDetail` you could get from the connection."
  totalCount: Int!
}

"A `EDetail` edge in the connection."
type EDetailsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `EDetail` at the end of the edge."
  node: EDetail!
}

"A connection to a list of `EFacility` values."
type EFacilitiesConnection {
  "A list of edges which contains the `EFacility` and cursor to aid in pagination."
  edges: [EFacilitiesEdge!]!
  "A list of `EFacility` objects."
  nodes: [EFacility!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `EFacility` you could get from the connection."
  totalCount: Int!
}

"A `EFacility` edge in the connection."
type EFacilitiesEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `EFacility` at the end of the edge."
  node: EFacility!
}

type EFacility implements Node {
  benTxt: String
  "Reads a single `EDetail` that is related to this `EFacility`."
  eDetailByFacUid: EDetail
  "Reads a single `ERiskEvaluation` that is related to this `EFacility`."
  eRiskEvaluationByFacUid: ERiskEvaluation
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String!
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  ownNam: String
  posCde: [Selection]
  subCnt: Int
  subTxt: String
}

type ERiskEvaluation implements Node {
  column10L: Int!
  column10M: Int!
  column10U: Int!
  column1L: Int!
  column1M: Int!
  column1U: Int!
  column2L: Int!
  column2M: Int!
  column2U: Int!
  column3L: Int!
  column3M: Int!
  column3U: Int!
  column4L: Int!
  column4M: Int!
  column4U: Int!
  column5L: Int!
  column5M: Int!
  column5U: Int!
  column6L: Int!
  column6M: Int!
  column6U: Int!
  column7L: Int!
  column7M: Int!
  column7U: Int!
  column8L: Int!
  column8M: Int!
  column8U: Int!
  column9L: Int!
  column9M: Int!
  column9U: Int!
  "Reads a single `EFacility` that is related to this `ERiskEvaluation`."
  eFacilityByFacUid: EFacility
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

"A connection to a list of `ERiskEvaluation` values."
type ERiskEvaluationsConnection {
  "A list of edges which contains the `ERiskEvaluation` and cursor to aid in pagination."
  edges: [ERiskEvaluationsEdge!]!
  "A list of `ERiskEvaluation` objects."
  nodes: [ERiskEvaluation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `ERiskEvaluation` you could get from the connection."
  totalCount: Int!
}

"A `ERiskEvaluation` edge in the connection."
type ERiskEvaluationsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `ERiskEvaluation` at the end of the edge."
  node: ERiskEvaluation!
}

type FDetail implements Node {
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  dmgSewl: Selection
  dmgSewm: Selection
  dmgSewu: Selection
  dmgSubl: Selection
  dmgSubm: Selection
  dmgSubu: Selection
  etcPosl: Selection
  etcPosm: Selection
  etcPosu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPosl: Selection
  evaPosm: Selection
  evaPosu: Selection
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  evaRivl: Selection
  evaRivm: Selection
  evaRivu: Selection
  "Reads a single `FFacility` that is related to this `FDetail`."
  fFacilityByFacUid: FFacility
  facUid: String!
  funFlal: Selection
  funFlam: Selection
  funFlau: Selection
  funPavl: Selection
  funPavm: Selection
  funPavu: Selection
  funUnpl: Selection
  funUnpm: Selection
  funUnpu: Selection
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  strPavl: Selection
  strPavm: Selection
  strPavu: Selection
  strSafl: Selection
  strSafm: Selection
  strSafu: Selection
  strShpl: Selection
  strShpm: Selection
  strShpu: Selection
  strSnkl: Selection
  strSnkm: Selection
  strSnku: Selection
  strWidl: BigFloat
  strWidm: BigFloat
  strWidu: BigFloat
}

"A connection to a list of `FDetail` values."
type FDetailsConnection {
  "A list of edges which contains the `FDetail` and cursor to aid in pagination."
  edges: [FDetailsEdge!]!
  "A list of `FDetail` objects."
  nodes: [FDetail!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `FDetail` you could get from the connection."
  totalCount: Int!
}

"A `FDetail` edge in the connection."
type FDetailsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `FDetail` at the end of the edge."
  node: FDetail!
}

"A connection to a list of `FFacility` values."
type FFacilitiesConnection {
  "A list of edges which contains the `FFacility` and cursor to aid in pagination."
  edges: [FFacilitiesEdge!]!
  "A list of `FFacility` objects."
  nodes: [FFacility!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `FFacility` you could get from the connection."
  totalCount: Int!
}

"A `FFacility` edge in the connection."
type FFacilitiesEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `FFacility` at the end of the edge."
  node: FFacility!
}

type FFacility implements Node {
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  "Reads a single `FDetail` that is related to this `FFacility`."
  fDetailByFacUid: FDetail
  "Reads a single `FRiskEvaluation` that is related to this `FFacility`."
  fRiskEvaluationByFacUid: FRiskEvaluation
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String!
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
  ownNam: String
  posCde: [Selection]
  subCnt: Int
  subTxt: String
}

type FRiskEvaluation implements Node {
  column10L: Int!
  column10M: Int!
  column10U: Int!
  column1L: Int!
  column1M: Int!
  column1U: Int!
  column2L: Int!
  column2M: Int!
  column2U: Int!
  column3L: Int!
  column3M: Int!
  column3U: Int!
  column4L: Int!
  column4M: Int!
  column4U: Int!
  column5L: Int!
  column5M: Int!
  column5U: Int!
  column6L: Int!
  column6M: Int!
  column6U: Int!
  column7L: Int!
  column7M: Int!
  column7U: Int!
  column8L: Int!
  column8M: Int!
  column8U: Int!
  column9L: Int!
  column9M: Int!
  column9U: Int!
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  "Reads a single `FFacility` that is related to this `FRiskEvaluation`."
  fFacilityByFacUid: FFacility
  facUid: String!
  "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
  nodeId: ID!
}

"A connection to a list of `FRiskEvaluation` values."
type FRiskEvaluationsConnection {
  "A list of edges which contains the `FRiskEvaluation` and cursor to aid in pagination."
  edges: [FRiskEvaluationsEdge!]!
  "A list of `FRiskEvaluation` objects."
  nodes: [FRiskEvaluation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `FRiskEvaluation` you could get from the connection."
  totalCount: Int!
}

"A `FRiskEvaluation` edge in the connection."
type FRiskEvaluationsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `FRiskEvaluation` at the end of the edge."
  node: FRiskEvaluation!
}

"The root mutation type which contains root level fields which mutate data."
type Mutation {
  "Creates a single `ADetail`."
  createADetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateADetailInput!
  ): CreateADetailPayload
  "Creates a single `AFacility`."
  createAFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateAFacilityInput!
  ): CreateAFacilityPayload
  "Creates a single `ARiskEvaluation`."
  createARiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateARiskEvaluationInput!
  ): CreateARiskEvaluationPayload
  "Creates a single `BBasin`."
  createBBasin(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateBBasinInput!
  ): CreateBBasinPayload
  "Creates a single `BDetail`."
  createBDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateBDetailInput!
  ): CreateBDetailPayload
  "Creates a single `BFacility`."
  createBFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateBFacilityInput!
  ): CreateBFacilityPayload
  "Creates a single `BRiskEvaluation`."
  createBRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateBRiskEvaluationInput!
  ): CreateBRiskEvaluationPayload
  "Creates a single `CDetail`."
  createCDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateCDetailInput!
  ): CreateCDetailPayload
  "Creates a single `CFacility`."
  createCFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateCFacilityInput!
  ): CreateCFacilityPayload
  "Creates a single `CRiskEvaluation`."
  createCRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateCRiskEvaluationInput!
  ): CreateCRiskEvaluationPayload
  "Creates a single `DDetail`."
  createDDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateDDetailInput!
  ): CreateDDetailPayload
  "Creates a single `DFacility`."
  createDFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateDFacilityInput!
  ): CreateDFacilityPayload
  "Creates a single `DRiskEvaluation`."
  createDRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateDRiskEvaluationInput!
  ): CreateDRiskEvaluationPayload
  "Creates a single `EDetail`."
  createEDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateEDetailInput!
  ): CreateEDetailPayload
  "Creates a single `EFacility`."
  createEFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateEFacilityInput!
  ): CreateEFacilityPayload
  "Creates a single `ERiskEvaluation`."
  createERiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateERiskEvaluationInput!
  ): CreateERiskEvaluationPayload
  "Creates a single `FDetail`."
  createFDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateFDetailInput!
  ): CreateFDetailPayload
  "Creates a single `FFacility`."
  createFFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateFFacilityInput!
  ): CreateFFacilityPayload
  "Creates a single `FRiskEvaluation`."
  createFRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateFRiskEvaluationInput!
  ): CreateFRiskEvaluationPayload
  "Creates a single `ViewRegion`."
  createViewRegion(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: CreateViewRegionInput!
  ): CreateViewRegionPayload
  "Deletes a single `ADetail` using a unique key."
  deleteADetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteADetailInput!
  ): DeleteADetailPayload
  "Deletes a single `ADetail` using its globally unique id."
  deleteADetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteADetailByNodeIdInput!
  ): DeleteADetailPayload
  "Deletes a single `AFacility` using a unique key."
  deleteAFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteAFacilityInput!
  ): DeleteAFacilityPayload
  "Deletes a single `AFacility` using its globally unique id."
  deleteAFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteAFacilityByNodeIdInput!
  ): DeleteAFacilityPayload
  "Deletes a single `ARiskEvaluation` using a unique key."
  deleteARiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteARiskEvaluationInput!
  ): DeleteARiskEvaluationPayload
  "Deletes a single `ARiskEvaluation` using its globally unique id."
  deleteARiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteARiskEvaluationByNodeIdInput!
  ): DeleteARiskEvaluationPayload
  "Deletes a single `BBasin` using a unique key."
  deleteBBasin(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBBasinInput!
  ): DeleteBBasinPayload
  "Deletes a single `BBasin` using its globally unique id."
  deleteBBasinByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBBasinByNodeIdInput!
  ): DeleteBBasinPayload
  "Deletes a single `BDetail` using a unique key."
  deleteBDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBDetailInput!
  ): DeleteBDetailPayload
  "Deletes a single `BDetail` using its globally unique id."
  deleteBDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBDetailByNodeIdInput!
  ): DeleteBDetailPayload
  "Deletes a single `BFacility` using a unique key."
  deleteBFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBFacilityInput!
  ): DeleteBFacilityPayload
  "Deletes a single `BFacility` using its globally unique id."
  deleteBFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBFacilityByNodeIdInput!
  ): DeleteBFacilityPayload
  "Deletes a single `BRiskEvaluation` using a unique key."
  deleteBRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBRiskEvaluationInput!
  ): DeleteBRiskEvaluationPayload
  "Deletes a single `BRiskEvaluation` using its globally unique id."
  deleteBRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteBRiskEvaluationByNodeIdInput!
  ): DeleteBRiskEvaluationPayload
  "Deletes a single `CDetail` using a unique key."
  deleteCDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteCDetailInput!
  ): DeleteCDetailPayload
  "Deletes a single `CDetail` using its globally unique id."
  deleteCDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteCDetailByNodeIdInput!
  ): DeleteCDetailPayload
  "Deletes a single `CFacility` using a unique key."
  deleteCFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteCFacilityInput!
  ): DeleteCFacilityPayload
  "Deletes a single `CFacility` using its globally unique id."
  deleteCFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteCFacilityByNodeIdInput!
  ): DeleteCFacilityPayload
  "Deletes a single `CRiskEvaluation` using a unique key."
  deleteCRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteCRiskEvaluationInput!
  ): DeleteCRiskEvaluationPayload
  "Deletes a single `CRiskEvaluation` using its globally unique id."
  deleteCRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteCRiskEvaluationByNodeIdInput!
  ): DeleteCRiskEvaluationPayload
  "Deletes a single `DDetail` using a unique key."
  deleteDDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteDDetailInput!
  ): DeleteDDetailPayload
  "Deletes a single `DDetail` using its globally unique id."
  deleteDDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteDDetailByNodeIdInput!
  ): DeleteDDetailPayload
  "Deletes a single `DFacility` using a unique key."
  deleteDFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteDFacilityInput!
  ): DeleteDFacilityPayload
  "Deletes a single `DFacility` using its globally unique id."
  deleteDFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteDFacilityByNodeIdInput!
  ): DeleteDFacilityPayload
  "Deletes a single `DRiskEvaluation` using a unique key."
  deleteDRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteDRiskEvaluationInput!
  ): DeleteDRiskEvaluationPayload
  "Deletes a single `DRiskEvaluation` using its globally unique id."
  deleteDRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteDRiskEvaluationByNodeIdInput!
  ): DeleteDRiskEvaluationPayload
  "Deletes a single `EDetail` using a unique key."
  deleteEDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteEDetailInput!
  ): DeleteEDetailPayload
  "Deletes a single `EDetail` using its globally unique id."
  deleteEDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteEDetailByNodeIdInput!
  ): DeleteEDetailPayload
  "Deletes a single `EFacility` using a unique key."
  deleteEFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteEFacilityInput!
  ): DeleteEFacilityPayload
  "Deletes a single `EFacility` using its globally unique id."
  deleteEFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteEFacilityByNodeIdInput!
  ): DeleteEFacilityPayload
  "Deletes a single `ERiskEvaluation` using a unique key."
  deleteERiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteERiskEvaluationInput!
  ): DeleteERiskEvaluationPayload
  "Deletes a single `ERiskEvaluation` using its globally unique id."
  deleteERiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteERiskEvaluationByNodeIdInput!
  ): DeleteERiskEvaluationPayload
  "Deletes a single `FDetail` using a unique key."
  deleteFDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteFDetailInput!
  ): DeleteFDetailPayload
  "Deletes a single `FDetail` using its globally unique id."
  deleteFDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteFDetailByNodeIdInput!
  ): DeleteFDetailPayload
  "Deletes a single `FFacility` using a unique key."
  deleteFFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteFFacilityInput!
  ): DeleteFFacilityPayload
  "Deletes a single `FFacility` using its globally unique id."
  deleteFFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteFFacilityByNodeIdInput!
  ): DeleteFFacilityPayload
  "Deletes a single `FRiskEvaluation` using a unique key."
  deleteFRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteFRiskEvaluationInput!
  ): DeleteFRiskEvaluationPayload
  "Deletes a single `FRiskEvaluation` using its globally unique id."
  deleteFRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: DeleteFRiskEvaluationByNodeIdInput!
  ): DeleteFRiskEvaluationPayload
  "Updates a single `ADetail` using a unique key and a patch."
  updateADetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateADetailInput!
  ): UpdateADetailPayload
  "Updates a single `ADetail` using its globally unique id and a patch."
  updateADetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateADetailByNodeIdInput!
  ): UpdateADetailPayload
  "Updates a single `AFacility` using a unique key and a patch."
  updateAFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateAFacilityInput!
  ): UpdateAFacilityPayload
  "Updates a single `AFacility` using its globally unique id and a patch."
  updateAFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateAFacilityByNodeIdInput!
  ): UpdateAFacilityPayload
  "Updates a single `ARiskEvaluation` using a unique key and a patch."
  updateARiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateARiskEvaluationInput!
  ): UpdateARiskEvaluationPayload
  "Updates a single `ARiskEvaluation` using its globally unique id and a patch."
  updateARiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateARiskEvaluationByNodeIdInput!
  ): UpdateARiskEvaluationPayload
  "Updates a single `BBasin` using a unique key and a patch."
  updateBBasin(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBBasinInput!
  ): UpdateBBasinPayload
  "Updates a single `BBasin` using its globally unique id and a patch."
  updateBBasinByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBBasinByNodeIdInput!
  ): UpdateBBasinPayload
  "Updates a single `BDetail` using a unique key and a patch."
  updateBDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBDetailInput!
  ): UpdateBDetailPayload
  "Updates a single `BDetail` using its globally unique id and a patch."
  updateBDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBDetailByNodeIdInput!
  ): UpdateBDetailPayload
  "Updates a single `BFacility` using a unique key and a patch."
  updateBFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBFacilityInput!
  ): UpdateBFacilityPayload
  "Updates a single `BFacility` using its globally unique id and a patch."
  updateBFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBFacilityByNodeIdInput!
  ): UpdateBFacilityPayload
  "Updates a single `BRiskEvaluation` using a unique key and a patch."
  updateBRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBRiskEvaluationInput!
  ): UpdateBRiskEvaluationPayload
  "Updates a single `BRiskEvaluation` using its globally unique id and a patch."
  updateBRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateBRiskEvaluationByNodeIdInput!
  ): UpdateBRiskEvaluationPayload
  "Updates a single `CDetail` using a unique key and a patch."
  updateCDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateCDetailInput!
  ): UpdateCDetailPayload
  "Updates a single `CDetail` using its globally unique id and a patch."
  updateCDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateCDetailByNodeIdInput!
  ): UpdateCDetailPayload
  "Updates a single `CFacility` using a unique key and a patch."
  updateCFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateCFacilityInput!
  ): UpdateCFacilityPayload
  "Updates a single `CFacility` using its globally unique id and a patch."
  updateCFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateCFacilityByNodeIdInput!
  ): UpdateCFacilityPayload
  "Updates a single `CRiskEvaluation` using a unique key and a patch."
  updateCRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateCRiskEvaluationInput!
  ): UpdateCRiskEvaluationPayload
  "Updates a single `CRiskEvaluation` using its globally unique id and a patch."
  updateCRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateCRiskEvaluationByNodeIdInput!
  ): UpdateCRiskEvaluationPayload
  "Updates a single `DDetail` using a unique key and a patch."
  updateDDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateDDetailInput!
  ): UpdateDDetailPayload
  "Updates a single `DDetail` using its globally unique id and a patch."
  updateDDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateDDetailByNodeIdInput!
  ): UpdateDDetailPayload
  "Updates a single `DFacility` using a unique key and a patch."
  updateDFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateDFacilityInput!
  ): UpdateDFacilityPayload
  "Updates a single `DFacility` using its globally unique id and a patch."
  updateDFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateDFacilityByNodeIdInput!
  ): UpdateDFacilityPayload
  "Updates a single `DRiskEvaluation` using a unique key and a patch."
  updateDRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateDRiskEvaluationInput!
  ): UpdateDRiskEvaluationPayload
  "Updates a single `DRiskEvaluation` using its globally unique id and a patch."
  updateDRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateDRiskEvaluationByNodeIdInput!
  ): UpdateDRiskEvaluationPayload
  "Updates a single `EDetail` using a unique key and a patch."
  updateEDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateEDetailInput!
  ): UpdateEDetailPayload
  "Updates a single `EDetail` using its globally unique id and a patch."
  updateEDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateEDetailByNodeIdInput!
  ): UpdateEDetailPayload
  "Updates a single `EFacility` using a unique key and a patch."
  updateEFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateEFacilityInput!
  ): UpdateEFacilityPayload
  "Updates a single `EFacility` using its globally unique id and a patch."
  updateEFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateEFacilityByNodeIdInput!
  ): UpdateEFacilityPayload
  "Updates a single `ERiskEvaluation` using a unique key and a patch."
  updateERiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateERiskEvaluationInput!
  ): UpdateERiskEvaluationPayload
  "Updates a single `ERiskEvaluation` using its globally unique id and a patch."
  updateERiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateERiskEvaluationByNodeIdInput!
  ): UpdateERiskEvaluationPayload
  "Updates a single `FDetail` using a unique key and a patch."
  updateFDetail(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateFDetailInput!
  ): UpdateFDetailPayload
  "Updates a single `FDetail` using its globally unique id and a patch."
  updateFDetailByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateFDetailByNodeIdInput!
  ): UpdateFDetailPayload
  "Updates a single `FFacility` using a unique key and a patch."
  updateFFacility(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateFFacilityInput!
  ): UpdateFFacilityPayload
  "Updates a single `FFacility` using its globally unique id and a patch."
  updateFFacilityByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateFFacilityByNodeIdInput!
  ): UpdateFFacilityPayload
  "Updates a single `FRiskEvaluation` using a unique key and a patch."
  updateFRiskEvaluation(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateFRiskEvaluationInput!
  ): UpdateFRiskEvaluationPayload
  "Updates a single `FRiskEvaluation` using its globally unique id and a patch."
  updateFRiskEvaluationByNodeId(
    "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
    input: UpdateFRiskEvaluationByNodeIdInput!
  ): UpdateFRiskEvaluationPayload
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: Cursor
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: Cursor
}

"The root query type which gives access points into the data universe."
type Query implements Node {
  aDetail(facUid: String!): ADetail
  "Reads a single `ADetail` using its globally unique `ID`."
  aDetailByNodeId(
    "The globally unique `ID` to be used in selecting a single `ADetail`."
    nodeId: ID!
  ): ADetail
  "Reads and enables pagination through a set of `ADetail`."
  aDetails(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: ADetailCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `ADetail`."
    orderBy: [ADetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ADetailsConnection
  "Reads and enables pagination through a set of `AFacility`."
  aFacilities(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: AFacilityCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `AFacility`."
    orderBy: [AFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AFacilitiesConnection
  aFacility(facUid: String!): AFacility
  "Reads a single `AFacility` using its globally unique `ID`."
  aFacilityByNodeId(
    "The globally unique `ID` to be used in selecting a single `AFacility`."
    nodeId: ID!
  ): AFacility
  aRiskEvaluation(facUid: String!): ARiskEvaluation
  "Reads a single `ARiskEvaluation` using its globally unique `ID`."
  aRiskEvaluationByNodeId(
    "The globally unique `ID` to be used in selecting a single `ARiskEvaluation`."
    nodeId: ID!
  ): ARiskEvaluation
  "Reads and enables pagination through a set of `ARiskEvaluation`."
  aRiskEvaluations(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: ARiskEvaluationCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `ARiskEvaluation`."
    orderBy: [ARiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ARiskEvaluationsConnection
  bBasin(facUid: String!, facUml: String!): BBasin
  "Reads a single `BBasin` using its globally unique `ID`."
  bBasinByNodeId(
    "The globally unique `ID` to be used in selecting a single `BBasin`."
    nodeId: ID!
  ): BBasin
  "Reads and enables pagination through a set of `BBasin`."
  bBasins(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: BBasinCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `BBasin`."
    orderBy: [BBasinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BBasinsConnection
  bDetail(facUid: String!): BDetail
  "Reads a single `BDetail` using its globally unique `ID`."
  bDetailByNodeId(
    "The globally unique `ID` to be used in selecting a single `BDetail`."
    nodeId: ID!
  ): BDetail
  "Reads and enables pagination through a set of `BDetail`."
  bDetails(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: BDetailCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `BDetail`."
    orderBy: [BDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BDetailsConnection
  "Reads and enables pagination through a set of `BFacility`."
  bFacilities(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: BFacilityCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `BFacility`."
    orderBy: [BFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BFacilitiesConnection
  bFacility(facUid: String!): BFacility
  "Reads a single `BFacility` using its globally unique `ID`."
  bFacilityByNodeId(
    "The globally unique `ID` to be used in selecting a single `BFacility`."
    nodeId: ID!
  ): BFacility
  bRiskEvaluation(facUid: String!): BRiskEvaluation
  "Reads a single `BRiskEvaluation` using its globally unique `ID`."
  bRiskEvaluationByNodeId(
    "The globally unique `ID` to be used in selecting a single `BRiskEvaluation`."
    nodeId: ID!
  ): BRiskEvaluation
  "Reads and enables pagination through a set of `BRiskEvaluation`."
  bRiskEvaluations(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: BRiskEvaluationCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `BRiskEvaluation`."
    orderBy: [BRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BRiskEvaluationsConnection
  cDetail(facUid: String!): CDetail
  "Reads a single `CDetail` using its globally unique `ID`."
  cDetailByNodeId(
    "The globally unique `ID` to be used in selecting a single `CDetail`."
    nodeId: ID!
  ): CDetail
  "Reads and enables pagination through a set of `CDetail`."
  cDetails(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: CDetailCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `CDetail`."
    orderBy: [CDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CDetailsConnection
  "Reads and enables pagination through a set of `CFacility`."
  cFacilities(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: CFacilityCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `CFacility`."
    orderBy: [CFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CFacilitiesConnection
  cFacility(facUid: String!): CFacility
  "Reads a single `CFacility` using its globally unique `ID`."
  cFacilityByNodeId(
    "The globally unique `ID` to be used in selecting a single `CFacility`."
    nodeId: ID!
  ): CFacility
  cRiskEvaluation(facUid: String!): CRiskEvaluation
  "Reads a single `CRiskEvaluation` using its globally unique `ID`."
  cRiskEvaluationByNodeId(
    "The globally unique `ID` to be used in selecting a single `CRiskEvaluation`."
    nodeId: ID!
  ): CRiskEvaluation
  "Reads and enables pagination through a set of `CRiskEvaluation`."
  cRiskEvaluations(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: CRiskEvaluationCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `CRiskEvaluation`."
    orderBy: [CRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CRiskEvaluationsConnection
  dDetail(facUid: String!): DDetail
  "Reads a single `DDetail` using its globally unique `ID`."
  dDetailByNodeId(
    "The globally unique `ID` to be used in selecting a single `DDetail`."
    nodeId: ID!
  ): DDetail
  "Reads and enables pagination through a set of `DDetail`."
  dDetails(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: DDetailCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `DDetail`."
    orderBy: [DDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DDetailsConnection
  "Reads and enables pagination through a set of `DFacility`."
  dFacilities(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: DFacilityCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `DFacility`."
    orderBy: [DFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DFacilitiesConnection
  dFacility(facUid: String!): DFacility
  "Reads a single `DFacility` using its globally unique `ID`."
  dFacilityByNodeId(
    "The globally unique `ID` to be used in selecting a single `DFacility`."
    nodeId: ID!
  ): DFacility
  dRiskEvaluation(facUid: String!): DRiskEvaluation
  "Reads a single `DRiskEvaluation` using its globally unique `ID`."
  dRiskEvaluationByNodeId(
    "The globally unique `ID` to be used in selecting a single `DRiskEvaluation`."
    nodeId: ID!
  ): DRiskEvaluation
  "Reads and enables pagination through a set of `DRiskEvaluation`."
  dRiskEvaluations(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: DRiskEvaluationCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `DRiskEvaluation`."
    orderBy: [DRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DRiskEvaluationsConnection
  eDetail(facUid: String!): EDetail
  "Reads a single `EDetail` using its globally unique `ID`."
  eDetailByNodeId(
    "The globally unique `ID` to be used in selecting a single `EDetail`."
    nodeId: ID!
  ): EDetail
  "Reads and enables pagination through a set of `EDetail`."
  eDetails(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: EDetailCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `EDetail`."
    orderBy: [EDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EDetailsConnection
  "Reads and enables pagination through a set of `EFacility`."
  eFacilities(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: EFacilityCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `EFacility`."
    orderBy: [EFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EFacilitiesConnection
  eFacility(facUid: String!): EFacility
  "Reads a single `EFacility` using its globally unique `ID`."
  eFacilityByNodeId(
    "The globally unique `ID` to be used in selecting a single `EFacility`."
    nodeId: ID!
  ): EFacility
  eRiskEvaluation(facUid: String!): ERiskEvaluation
  "Reads a single `ERiskEvaluation` using its globally unique `ID`."
  eRiskEvaluationByNodeId(
    "The globally unique `ID` to be used in selecting a single `ERiskEvaluation`."
    nodeId: ID!
  ): ERiskEvaluation
  "Reads and enables pagination through a set of `ERiskEvaluation`."
  eRiskEvaluations(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: ERiskEvaluationCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `ERiskEvaluation`."
    orderBy: [ERiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ERiskEvaluationsConnection
  fDetail(facUid: String!): FDetail
  "Reads a single `FDetail` using its globally unique `ID`."
  fDetailByNodeId(
    "The globally unique `ID` to be used in selecting a single `FDetail`."
    nodeId: ID!
  ): FDetail
  "Reads and enables pagination through a set of `FDetail`."
  fDetails(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: FDetailCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `FDetail`."
    orderBy: [FDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FDetailsConnection
  "Reads and enables pagination through a set of `FFacility`."
  fFacilities(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: FFacilityCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `FFacility`."
    orderBy: [FFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FFacilitiesConnection
  fFacility(facUid: String!): FFacility
  "Reads a single `FFacility` using its globally unique `ID`."
  fFacilityByNodeId(
    "The globally unique `ID` to be used in selecting a single `FFacility`."
    nodeId: ID!
  ): FFacility
  fRiskEvaluation(facUid: String!): FRiskEvaluation
  "Reads a single `FRiskEvaluation` using its globally unique `ID`."
  fRiskEvaluationByNodeId(
    "The globally unique `ID` to be used in selecting a single `FRiskEvaluation`."
    nodeId: ID!
  ): FRiskEvaluation
  "Reads and enables pagination through a set of `FRiskEvaluation`."
  fRiskEvaluations(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: FRiskEvaluationCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `FRiskEvaluation`."
    orderBy: [FRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FRiskEvaluationsConnection
  "Fetches an object given its globally unique `ID`."
  node(
    "The globally unique `ID`."
    nodeId: ID!
  ): Node
  "The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`."
  nodeId: ID!
  """

  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  "Reads and enables pagination through a set of `ViewCadaster`."
  viewCadasters(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: ViewCadasterCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `ViewCadaster`."
    orderBy: [ViewCadastersOrderBy!] = [NATURAL]
  ): ViewCadastersConnection
  "Reads and enables pagination through a set of `ViewFacility`."
  viewFacilities(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: ViewFacilityCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `ViewFacility`."
    orderBy: [ViewFacilitiesOrderBy!] = [NATURAL]
  ): ViewFacilitiesConnection
  "Reads and enables pagination through a set of `ViewRegion`."
  viewRegions(
    "Read all values in the set after (below) this cursor."
    after: Cursor,
    "Read all values in the set before (above) this cursor."
    before: Cursor,
    "A condition to be used in determining which values should be returned by the collection."
    condition: ViewRegionCondition,
    "Only read the first `n` values of the set."
    first: Int,
    "Only read the last `n` values of the set."
    last: Int,
    """

    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int,
    "The method to use when ordering `ViewRegion`."
    orderBy: [ViewRegionsOrderBy!] = [NATURAL]
  ): ViewRegionsConnection
}

"The output of our update `ADetail` mutation."
type UpdateADetailPayload {
  "The `ADetail` that was updated by this mutation."
  aDetail: ADetail
  "An edge for our `ADetail`. May be used by Relay 1."
  aDetailEdge(
    "The method to use when ordering `ADetail`."
    orderBy: [ADetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ADetailsEdge
  "Reads a single `AFacility` that is related to this `ADetail`."
  aFacilityByFacUid: AFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `AFacility` mutation."
type UpdateAFacilityPayload {
  "The `AFacility` that was updated by this mutation."
  aFacility: AFacility
  "An edge for our `AFacility`. May be used by Relay 1."
  aFacilityEdge(
    "The method to use when ordering `AFacility`."
    orderBy: [AFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `ARiskEvaluation` mutation."
type UpdateARiskEvaluationPayload {
  "Reads a single `AFacility` that is related to this `ARiskEvaluation`."
  aFacilityByFacUid: AFacility
  "The `ARiskEvaluation` that was updated by this mutation."
  aRiskEvaluation: ARiskEvaluation
  "An edge for our `ARiskEvaluation`. May be used by Relay 1."
  aRiskEvaluationEdge(
    "The method to use when ordering `ARiskEvaluation`."
    orderBy: [ARiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ARiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `BBasin` mutation."
type UpdateBBasinPayload {
  "The `BBasin` that was updated by this mutation."
  bBasin: BBasin
  "An edge for our `BBasin`. May be used by Relay 1."
  bBasinEdge(
    "The method to use when ordering `BBasin`."
    orderBy: [BBasinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BBasinsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `BDetail` mutation."
type UpdateBDetailPayload {
  "The `BDetail` that was updated by this mutation."
  bDetail: BDetail
  "An edge for our `BDetail`. May be used by Relay 1."
  bDetailEdge(
    "The method to use when ordering `BDetail`."
    orderBy: [BDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BDetailsEdge
  "Reads a single `BFacility` that is related to this `BDetail`."
  bFacilityByFacUid: BFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `BFacility` mutation."
type UpdateBFacilityPayload {
  "The `BFacility` that was updated by this mutation."
  bFacility: BFacility
  "An edge for our `BFacility`. May be used by Relay 1."
  bFacilityEdge(
    "The method to use when ordering `BFacility`."
    orderBy: [BFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `BRiskEvaluation` mutation."
type UpdateBRiskEvaluationPayload {
  "Reads a single `BFacility` that is related to this `BRiskEvaluation`."
  bFacilityByFacUid: BFacility
  "The `BRiskEvaluation` that was updated by this mutation."
  bRiskEvaluation: BRiskEvaluation
  "An edge for our `BRiskEvaluation`. May be used by Relay 1."
  bRiskEvaluationEdge(
    "The method to use when ordering `BRiskEvaluation`."
    orderBy: [BRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BRiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `CDetail` mutation."
type UpdateCDetailPayload {
  "The `CDetail` that was updated by this mutation."
  cDetail: CDetail
  "An edge for our `CDetail`. May be used by Relay 1."
  cDetailEdge(
    "The method to use when ordering `CDetail`."
    orderBy: [CDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CDetailsEdge
  "Reads a single `CFacility` that is related to this `CDetail`."
  cFacilityByFacUid: CFacility
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `CFacility` mutation."
type UpdateCFacilityPayload {
  "The `CFacility` that was updated by this mutation."
  cFacility: CFacility
  "An edge for our `CFacility`. May be used by Relay 1."
  cFacilityEdge(
    "The method to use when ordering `CFacility`."
    orderBy: [CFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CFacilitiesEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `CRiskEvaluation` mutation."
type UpdateCRiskEvaluationPayload {
  "Reads a single `CFacility` that is related to this `CRiskEvaluation`."
  cFacilityByFacUid: CFacility
  "The `CRiskEvaluation` that was updated by this mutation."
  cRiskEvaluation: CRiskEvaluation
  "An edge for our `CRiskEvaluation`. May be used by Relay 1."
  cRiskEvaluationEdge(
    "The method to use when ordering `CRiskEvaluation`."
    orderBy: [CRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CRiskEvaluationsEdge
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `DDetail` mutation."
type UpdateDDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `DDetail` that was updated by this mutation."
  dDetail: DDetail
  "An edge for our `DDetail`. May be used by Relay 1."
  dDetailEdge(
    "The method to use when ordering `DDetail`."
    orderBy: [DDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DDetailsEdge
  "Reads a single `DFacility` that is related to this `DDetail`."
  dFacilityByFacUid: DFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `DFacility` mutation."
type UpdateDFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `DFacility` that was updated by this mutation."
  dFacility: DFacility
  "An edge for our `DFacility`. May be used by Relay 1."
  dFacilityEdge(
    "The method to use when ordering `DFacility`."
    orderBy: [DFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `DRiskEvaluation` mutation."
type UpdateDRiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Reads a single `DFacility` that is related to this `DRiskEvaluation`."
  dFacilityByFacUid: DFacility
  "The `DRiskEvaluation` that was updated by this mutation."
  dRiskEvaluation: DRiskEvaluation
  "An edge for our `DRiskEvaluation`. May be used by Relay 1."
  dRiskEvaluationEdge(
    "The method to use when ordering `DRiskEvaluation`."
    orderBy: [DRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DRiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `EDetail` mutation."
type UpdateEDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `EDetail` that was updated by this mutation."
  eDetail: EDetail
  "An edge for our `EDetail`. May be used by Relay 1."
  eDetailEdge(
    "The method to use when ordering `EDetail`."
    orderBy: [EDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EDetailsEdge
  "Reads a single `EFacility` that is related to this `EDetail`."
  eFacilityByFacUid: EFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `EFacility` mutation."
type UpdateEFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `EFacility` that was updated by this mutation."
  eFacility: EFacility
  "An edge for our `EFacility`. May be used by Relay 1."
  eFacilityEdge(
    "The method to use when ordering `EFacility`."
    orderBy: [EFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `ERiskEvaluation` mutation."
type UpdateERiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Reads a single `EFacility` that is related to this `ERiskEvaluation`."
  eFacilityByFacUid: EFacility
  "The `ERiskEvaluation` that was updated by this mutation."
  eRiskEvaluation: ERiskEvaluation
  "An edge for our `ERiskEvaluation`. May be used by Relay 1."
  eRiskEvaluationEdge(
    "The method to use when ordering `ERiskEvaluation`."
    orderBy: [ERiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ERiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `FDetail` mutation."
type UpdateFDetailPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `FDetail` that was updated by this mutation."
  fDetail: FDetail
  "An edge for our `FDetail`. May be used by Relay 1."
  fDetailEdge(
    "The method to use when ordering `FDetail`."
    orderBy: [FDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FDetailsEdge
  "Reads a single `FFacility` that is related to this `FDetail`."
  fFacilityByFacUid: FFacility
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `FFacility` mutation."
type UpdateFFacilityPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "The `FFacility` that was updated by this mutation."
  fFacility: FFacility
  "An edge for our `FFacility`. May be used by Relay 1."
  fFacilityEdge(
    "The method to use when ordering `FFacility`."
    orderBy: [FFacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FFacilitiesEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

"The output of our update `FRiskEvaluation` mutation."
type UpdateFRiskEvaluationPayload {
  """

  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  "Reads a single `FFacility` that is related to this `FRiskEvaluation`."
  fFacilityByFacUid: FFacility
  "The `FRiskEvaluation` that was updated by this mutation."
  fRiskEvaluation: FRiskEvaluation
  "An edge for our `FRiskEvaluation`. May be used by Relay 1."
  fRiskEvaluationEdge(
    "The method to use when ordering `FRiskEvaluation`."
    orderBy: [FRiskEvaluationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FRiskEvaluationsEdge
  "Our root query field type. Allows us to run any query from our mutation payload."
  query: Query
}

type ViewCadaster {
  bjdCde: String
  bjdNam: String
  geom: String
  hjdNam: String
  jibun: String
  pnu: String
}

"A connection to a list of `ViewCadaster` values."
type ViewCadastersConnection {
  "A list of edges which contains the `ViewCadaster` and cursor to aid in pagination."
  edges: [ViewCadastersEdge!]!
  "A list of `ViewCadaster` objects."
  nodes: [ViewCadaster!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `ViewCadaster` you could get from the connection."
  totalCount: Int!
}

"A `ViewCadaster` edge in the connection."
type ViewCadastersEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `ViewCadaster` at the end of the edge."
  node: ViewCadaster!
}

"A connection to a list of `ViewFacility` values."
type ViewFacilitiesConnection {
  "A list of edges which contains the `ViewFacility` and cursor to aid in pagination."
  edges: [ViewFacilitiesEdge!]!
  "A list of `ViewFacility` objects."
  nodes: [ViewFacility!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `ViewFacility` you could get from the connection."
  totalCount: Int!
}

"A `ViewFacility` edge in the connection."
type ViewFacilitiesEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `ViewFacility` at the end of the edge."
  node: ViewFacility!
}

type ViewFacility {
  bjdCde: String
  bjdNam: String
  exmChk: Selection
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facTyp: String
  facUid: String
  geom: String
  hjdNam: String
  typNam: String
}

type ViewRegion {
  bjdCde: String
  bjdNam: String
  geom: String
  hjdNam: String
}

"A connection to a list of `ViewRegion` values."
type ViewRegionsConnection {
  "A list of edges which contains the `ViewRegion` and cursor to aid in pagination."
  edges: [ViewRegionsEdge!]!
  "A list of `ViewRegion` objects."
  nodes: [ViewRegion!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "The count of *all* `ViewRegion` you could get from the connection."
  totalCount: Int!
}

"A `ViewRegion` edge in the connection."
type ViewRegionsEdge {
  "A cursor for use in pagination."
  cursor: Cursor
  "The `ViewRegion` at the end of the edge."
  node: ViewRegion!
}

"Methods to use when ordering `ADetail`."
enum ADetailsOrderBy {
  CAT_FUN_ASC
  CAT_FUN_DESC
  CAT_IMP_ASC
  CAT_IMP_DESC
  CAT_POS_ASC
  CAT_POS_DESC
  CAT_TYP_ASC
  CAT_TYP_DESC
  ETC_TRF_ASC
  ETC_TRF_DESC
  ETC_TRH_ASC
  ETC_TRH_DESC
  EVA_INF_ASC
  EVA_INF_DESC
  EVA_OPE_ASC
  EVA_OPE_DESC
  EVA_OPI_ASC
  EVA_OPI_DESC
  EVA_PXM_ASC
  EVA_PXM_DESC
  EVA_ROA_ASC
  EVA_ROA_DESC
  EVA_STT_ASC
  EVA_STT_DESC
  EVA_SUR_ASC
  EVA_SUR_DESC
  FAC_GAP_ASC
  FAC_GAP_DESC
  FAC_HGT_ASC
  FAC_HGT_DESC
  FAC_LEN_ASC
  FAC_LEN_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FAC_WID_ASC
  FAC_WID_DESC
  FLD_DMG_ASC
  FLD_DMG_DESC
  FLD_WAL_ASC
  FLD_WAL_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RIV_LOW_ASC
  RIV_LOW_DESC
  RIV_MID_ASC
  RIV_MID_DESC
  RIV_UPP_ASC
  RIV_UPP_DESC
  SEC_COL_ASC
  SEC_COL_DESC
  SEC_DIA_ASC
  SEC_DIA_DESC
  SEC_FLR_ASC
  SEC_FLR_DESC
  SEC_HGT_ASC
  SEC_HGT_DESC
  SEC_WID_ASC
  SEC_WID_DESC
  STR_DMG_ASC
  STR_DMG_DESC
  STR_HOL_ASC
  STR_HOL_DESC
  STR_OLD_ASC
  STR_OLD_DESC
  STR_REB_ASC
  STR_REB_DESC
}

"Methods to use when ordering `AFacility`."
enum AFacilitiesOrderBy {
  BEN_TXT_ASC
  BEN_TXT_DESC
  CAT_CDE_ASC
  CAT_CDE_DESC
  EXM_CHK_ASC
  EXM_CHK_DESC
  EXM_NAM_ASC
  EXM_NAM_DESC
  EXM_OPI_ASC
  EXM_OPI_DESC
  EXM_YMD_ASC
  EXM_YMD_DESC
  FAC_ADM_ASC
  FAC_ADM_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_PID_ASC
  FAC_PID_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FUN_CDE_ASC
  FUN_CDE_DESC
  GEOM_ASC
  GEOM_DESC
  HZD_UID_ASC
  HZD_UID_DESC
  HZD_YMD_ASC
  HZD_YMD_DESC
  IMG_FAC_ASC
  IMG_FAC_DESC
  IMG_REP_ASC
  IMG_REP_DESC
  MNG_NAM_ASC
  MNG_NAM_DESC
  MNG_TEL_ASC
  MNG_TEL_DESC
  NATURAL
  OWN_NAM_ASC
  OWN_NAM_DESC
  POS_CDE_ASC
  POS_CDE_DESC
  POS_NAM_ASC
  POS_NAM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUB_CNT_ASC
  SUB_CNT_DESC
  SUB_TXT_ASC
  SUB_TXT_DESC
  TYP_CDE_ASC
  TYP_CDE_DESC
  TYP_TXT_ASC
  TYP_TXT_DESC
}

"Methods to use when ordering `ARiskEvaluation`."
enum ARiskEvaluationsOrderBy {
  COLUMN_10_ASC
  COLUMN_10_DESC
  COLUMN_1_ASC
  COLUMN_1_DESC
  COLUMN_2_ASC
  COLUMN_2_DESC
  COLUMN_3_ASC
  COLUMN_3_DESC
  COLUMN_4_ASC
  COLUMN_4_DESC
  COLUMN_5_ASC
  COLUMN_5_DESC
  COLUMN_6_ASC
  COLUMN_6_DESC
  COLUMN_7_ASC
  COLUMN_7_DESC
  COLUMN_8_ASC
  COLUMN_8_DESC
  COLUMN_9_ASC
  COLUMN_9_DESC
  EVA_CHK_ASC
  EVA_CHK_DESC
  EVA_NAM_ASC
  EVA_NAM_DESC
  EVA_YMD_ASC
  EVA_YMD_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"Methods to use when ordering `BBasin`."
enum BBasinsOrderBy {
  COLUMN_NAME2_ASC
  COLUMN_NAME2_DESC
  COLUMN_NAME3_ASC
  COLUMN_NAME3_DESC
  COLUMN_NAME4_ASC
  COLUMN_NAME4_DESC
  COLUMN_NAME5_ASC
  COLUMN_NAME5_DESC
  COLUMN_NAME6_ASC
  COLUMN_NAME6_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FAC_UML_ASC
  FAC_UML_DESC
  GEOM_ASC
  GEOM_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"Methods to use when ordering `BDetail`."
enum BDetailsOrderBy {
  BNK_HGTL_ASC
  BNK_HGTL_DESC
  BNK_HGTM_ASC
  BNK_HGTM_DESC
  BNK_HGTU_ASC
  BNK_HGTU_DESC
  BNK_STLL_ASC
  BNK_STLL_DESC
  BNK_STLM_ASC
  BNK_STLM_DESC
  BNK_STLU_ASC
  BNK_STLU_DESC
  BNK_STRL_ASC
  BNK_STRL_DESC
  BNK_STRM_ASC
  BNK_STRM_DESC
  BNK_STRU_ASC
  BNK_STRU_DESC
  CAT_FUNL_ASC
  CAT_FUNL_DESC
  CAT_FUNM_ASC
  CAT_FUNM_DESC
  CAT_FUNU_ASC
  CAT_FUNU_DESC
  CAT_IMPL_ASC
  CAT_IMPL_DESC
  CAT_IMPM_ASC
  CAT_IMPM_DESC
  CAT_IMPU_ASC
  CAT_IMPU_DESC
  CRN_WDLL_ASC
  CRN_WDLL_DESC
  CRN_WDLM_ASC
  CRN_WDLM_DESC
  CRN_WDLU_ASC
  CRN_WDLU_DESC
  CRN_WDRL_ASC
  CRN_WDRL_DESC
  CRN_WDRM_ASC
  CRN_WDRM_DESC
  CRN_WDRU_ASC
  CRN_WDRU_DESC
  DMG_LIFL_ASC
  DMG_LIFL_DESC
  DMG_LIFM_ASC
  DMG_LIFM_DESC
  DMG_LIFU_ASC
  DMG_LIFU_DESC
  DMG_PROL_ASC
  DMG_PROL_DESC
  DMG_PROM_ASC
  DMG_PROM_DESC
  DMG_PROU_ASC
  DMG_PROU_DESC
  DMG_TXTL_ASC
  DMG_TXTL_DESC
  DMG_TXTM_ASC
  DMG_TXTM_DESC
  DMG_TXTU_ASC
  DMG_TXTU_DESC
  DOR_PASL_ASC
  DOR_PASL_DESC
  DOR_PASM_ASC
  DOR_PASM_DESC
  DOR_PASU_ASC
  DOR_PASU_DESC
  EVA_INFL_ASC
  EVA_INFL_DESC
  EVA_INFM_ASC
  EVA_INFM_DESC
  EVA_INFU_ASC
  EVA_INFU_DESC
  EVA_OPEL_ASC
  EVA_OPEL_DESC
  EVA_OPEM_ASC
  EVA_OPEM_DESC
  EVA_OPEU_ASC
  EVA_OPEU_DESC
  EVA_OPIL_ASC
  EVA_OPIL_DESC
  EVA_OPIM_ASC
  EVA_OPIM_DESC
  EVA_OPIU_ASC
  EVA_OPIU_DESC
  EVA_PRXL_ASC
  EVA_PRXL_DESC
  EVA_PRXM_ASC
  EVA_PRXM_DESC
  EVA_PRXU_ASC
  EVA_PRXU_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FLD_CDEL_ASC
  FLD_CDEL_DESC
  FLD_CDEM_ASC
  FLD_CDEM_DESC
  FLD_CDEU_ASC
  FLD_CDEU_DESC
  FLD_TXTL_ASC
  FLD_TXTL_DESC
  FLD_TXTM_ASC
  FLD_TXTM_DESC
  FLD_TXTU_ASC
  FLD_TXTU_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REV_MALL_ASC
  REV_MALL_DESC
  REV_MALM_ASC
  REV_MALM_DESC
  REV_MALU_ASC
  REV_MALU_DESC
  REV_MARL_ASC
  REV_MARL_DESC
  REV_MARM_ASC
  REV_MARM_DESC
  REV_MARU_ASC
  REV_MARU_DESC
  REV_STLL_ASC
  REV_STLL_DESC
  REV_STLM_ASC
  REV_STLM_DESC
  REV_STLU_ASC
  REV_STLU_DESC
  REV_STRL_ASC
  REV_STRL_DESC
  REV_STRM_ASC
  REV_STRM_DESC
  REV_STRU_ASC
  REV_STRU_DESC
  RIV_CHGL_ASC
  RIV_CHGL_DESC
  RIV_CHGM_ASC
  RIV_CHGM_DESC
  RIV_CHGU_ASC
  RIV_CHGU_DESC
  RIV_DEPL_ASC
  RIV_DEPL_DESC
  RIV_DEPM_ASC
  RIV_DEPM_DESC
  RIV_DEPU_ASC
  RIV_DEPU_DESC
  RIV_DMGL_ASC
  RIV_DMGL_DESC
  RIV_DMGM_ASC
  RIV_DMGM_DESC
  RIV_DMGU_ASC
  RIV_DMGU_DESC
  RIV_PLTL_ASC
  RIV_PLTL_DESC
  RIV_PLTM_ASC
  RIV_PLTM_DESC
  RIV_PLTU_ASC
  RIV_PLTU_DESC
  RIV_POSL_ASC
  RIV_POSL_DESC
  RIV_POSM_ASC
  RIV_POSM_DESC
  RIV_POSU_ASC
  RIV_POSU_DESC
  RIV_WIDL_ASC
  RIV_WIDL_DESC
  RIV_WIDM_ASC
  RIV_WIDM_DESC
  RIV_WIDU_ASC
  RIV_WIDU_DESC
}

"Methods to use when ordering `BFacility`."
enum BFacilitiesOrderBy {
  BEN_TXT_ASC
  BEN_TXT_DESC
  EXM_CHK_ASC
  EXM_CHK_DESC
  EXM_NAM_ASC
  EXM_NAM_DESC
  EXM_OPI_ASC
  EXM_OPI_DESC
  EXM_YMD_ASC
  EXM_YMD_DESC
  FAC_ADL_ASC
  FAC_ADL_DESC
  FAC_ADM_ASC
  FAC_ADM_DESC
  FAC_ADU_ASC
  FAC_ADU_DESC
  FAC_LEN_ASC
  FAC_LEN_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_PID_ASC
  FAC_PID_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FAC_WID_ASC
  FAC_WID_DESC
  FUN_CDE_ASC
  FUN_CDE_DESC
  GEOM_ASC
  GEOM_DESC
  HZD_UID_ASC
  HZD_UID_DESC
  HZD_YMD_ASC
  HZD_YMD_DESC
  IMG_FAC_ASC
  IMG_FAC_DESC
  IMG_REP_ASC
  IMG_REP_DESC
  MNG_NAM_ASC
  MNG_NAM_DESC
  MNG_TEL_ASC
  MNG_TEL_DESC
  NATURAL
  OWN_NAM_ASC
  OWN_NAM_DESC
  POS_CDE_ASC
  POS_CDE_DESC
  POS_NAM_ASC
  POS_NAM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUB_CNT_ASC
  SUB_CNT_DESC
  SUB_TXT_ASC
  SUB_TXT_DESC
}

"Methods to use when ordering `BRiskEvaluation`."
enum BRiskEvaluationsOrderBy {
  COLUMN_10L_ASC
  COLUMN_10L_DESC
  COLUMN_10M_ASC
  COLUMN_10M_DESC
  COLUMN_10U_ASC
  COLUMN_10U_DESC
  COLUMN_1L_ASC
  COLUMN_1L_DESC
  COLUMN_1M_ASC
  COLUMN_1M_DESC
  COLUMN_1U_ASC
  COLUMN_1U_DESC
  COLUMN_2L_ASC
  COLUMN_2L_DESC
  COLUMN_2M_ASC
  COLUMN_2M_DESC
  COLUMN_2U_ASC
  COLUMN_2U_DESC
  COLUMN_3L_ASC
  COLUMN_3L_DESC
  COLUMN_3M_ASC
  COLUMN_3M_DESC
  COLUMN_3U_ASC
  COLUMN_3U_DESC
  COLUMN_4L_ASC
  COLUMN_4L_DESC
  COLUMN_4M_ASC
  COLUMN_4M_DESC
  COLUMN_4U_ASC
  COLUMN_4U_DESC
  COLUMN_5L_ASC
  COLUMN_5L_DESC
  COLUMN_5M_ASC
  COLUMN_5M_DESC
  COLUMN_5U_ASC
  COLUMN_5U_DESC
  COLUMN_6L_ASC
  COLUMN_6L_DESC
  COLUMN_6M_ASC
  COLUMN_6M_DESC
  COLUMN_6U_ASC
  COLUMN_6U_DESC
  COLUMN_7L_ASC
  COLUMN_7L_DESC
  COLUMN_7M_ASC
  COLUMN_7M_DESC
  COLUMN_7U_ASC
  COLUMN_7U_DESC
  COLUMN_8L_ASC
  COLUMN_8L_DESC
  COLUMN_8M_ASC
  COLUMN_8M_DESC
  COLUMN_8U_ASC
  COLUMN_8U_DESC
  COLUMN_9L_ASC
  COLUMN_9L_DESC
  COLUMN_9M_ASC
  COLUMN_9M_DESC
  COLUMN_9U_ASC
  COLUMN_9U_DESC
  EVA_CHK_ASC
  EVA_CHK_DESC
  EVA_NAM_ASC
  EVA_NAM_DESC
  EVA_YMD_ASC
  EVA_YMD_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"Methods to use when ordering `CDetail`."
enum CDetailsOrderBy {
  CAT_IMP_ASC
  CAT_IMP_DESC
  DEP_STT_ASC
  DEP_STT_DESC
  ETC_ENV_ASC
  ETC_ENV_DESC
  ETC_FSH_ASC
  ETC_FSH_DESC
  EVA_INF_ASC
  EVA_INF_DESC
  EVA_OPE_ASC
  EVA_OPE_DESC
  EVA_OPI_ASC
  EVA_OPI_DESC
  EVA_SUR_ASC
  EVA_SUR_DESC
  FAC_HGT_ASC
  FAC_HGT_DESC
  FAC_LEN_ASC
  FAC_LEN_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FUN_MCH_ASC
  FUN_MCH_DESC
  FUN_STT_ASC
  FUN_STT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STR_BOD_ASC
  STR_BOD_DESC
  STR_FLR_ASC
  STR_FLR_DESC
  STR_HZD_ASC
  STR_HZD_DESC
  STR_JNT_ASC
  STR_JNT_DESC
  STR_WAL_ASC
  STR_WAL_DESC
}

"Methods to use when ordering `CFacility`."
enum CFacilitiesOrderBy {
  BEN_TXT_ASC
  BEN_TXT_DESC
  CAT_CDE_ASC
  CAT_CDE_DESC
  EXM_CHK_ASC
  EXM_CHK_DESC
  EXM_NAM_ASC
  EXM_NAM_DESC
  EXM_OPI_ASC
  EXM_OPI_DESC
  EXM_YMD_ASC
  EXM_YMD_DESC
  FAC_ADM_ASC
  FAC_ADM_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_PID_ASC
  FAC_PID_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FUN_CDE_ASC
  FUN_CDE_DESC
  GEOM_ASC
  GEOM_DESC
  HZD_UID_ASC
  HZD_UID_DESC
  HZD_YMD_ASC
  HZD_YMD_DESC
  IMG_FAC_ASC
  IMG_FAC_DESC
  IMG_REP_ASC
  IMG_REP_DESC
  MNG_NAM_ASC
  MNG_NAM_DESC
  MNG_TEL_ASC
  MNG_TEL_DESC
  NATURAL
  OWN_NAM_ASC
  OWN_NAM_DESC
  POS_CDE_ASC
  POS_CDE_DESC
  POS_NAM_ASC
  POS_NAM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUB_CNT_ASC
  SUB_CNT_DESC
  SUB_TXT_ASC
  SUB_TXT_DESC
}

"Methods to use when ordering `CRiskEvaluation`."
enum CRiskEvaluationsOrderBy {
  COLUMN_10_ASC
  COLUMN_10_DESC
  COLUMN_1_ASC
  COLUMN_1_DESC
  COLUMN_2_ASC
  COLUMN_2_DESC
  COLUMN_3_ASC
  COLUMN_3_DESC
  COLUMN_4_ASC
  COLUMN_4_DESC
  COLUMN_5_ASC
  COLUMN_5_DESC
  COLUMN_6_ASC
  COLUMN_6_DESC
  COLUMN_7_ASC
  COLUMN_7_DESC
  COLUMN_8_ASC
  COLUMN_8_DESC
  COLUMN_9_ASC
  COLUMN_9_DESC
  EVA_CHK_ASC
  EVA_CHK_DESC
  EVA_NAM_ASC
  EVA_NAM_DESC
  EVA_YMD_ASC
  EVA_YMD_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"Methods to use when ordering `DDetail`."
enum DDetailsOrderBy {
  CAT_IMP_ASC
  CAT_IMP_DESC
  DEP_STT_ASC
  DEP_STT_DESC
  ETC_ENV_ASC
  ETC_ENV_DESC
  ETC_FSH_ASC
  ETC_FSH_DESC
  EVA_INF_ASC
  EVA_INF_DESC
  EVA_OPE_ASC
  EVA_OPE_DESC
  EVA_OPI_ASC
  EVA_OPI_DESC
  EVA_SUR_ASC
  EVA_SUR_DESC
  FAC_HGT_ASC
  FAC_HGT_DESC
  FAC_LEN_ASC
  FAC_LEN_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FUN_MCH_ASC
  FUN_MCH_DESC
  FUN_STT_ASC
  FUN_STT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STR_BOD_ASC
  STR_BOD_DESC
  STR_FLR_ASC
  STR_FLR_DESC
  STR_HZD_ASC
  STR_HZD_DESC
  STR_JNT_ASC
  STR_JNT_DESC
  STR_WAL_ASC
  STR_WAL_DESC
}

"Methods to use when ordering `DFacility`."
enum DFacilitiesOrderBy {
  BEN_TXT_ASC
  BEN_TXT_DESC
  CAT_CDE_ASC
  CAT_CDE_DESC
  EXM_CHK_ASC
  EXM_CHK_DESC
  EXM_NAM_ASC
  EXM_NAM_DESC
  EXM_OPI_ASC
  EXM_OPI_DESC
  EXM_YMD_ASC
  EXM_YMD_DESC
  FAC_ADM_ASC
  FAC_ADM_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_PID_ASC
  FAC_PID_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FUN_CDE_ASC
  FUN_CDE_DESC
  GEOM_ASC
  GEOM_DESC
  HZD_UID_ASC
  HZD_UID_DESC
  HZD_YMD_ASC
  HZD_YMD_DESC
  IMG_FAC_ASC
  IMG_FAC_DESC
  IMG_REP_ASC
  IMG_REP_DESC
  MNG_NAM_ASC
  MNG_NAM_DESC
  MNG_TEL_ASC
  MNG_TEL_DESC
  NATURAL
  OWN_NAM_ASC
  OWN_NAM_DESC
  POS_CDE_ASC
  POS_CDE_DESC
  POS_NAM_ASC
  POS_NAM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUB_CNT_ASC
  SUB_CNT_DESC
  SUB_TXT_ASC
  SUB_TXT_DESC
}

"Methods to use when ordering `DRiskEvaluation`."
enum DRiskEvaluationsOrderBy {
  COLUMN_10_ASC
  COLUMN_10_DESC
  COLUMN_1_ASC
  COLUMN_1_DESC
  COLUMN_2_ASC
  COLUMN_2_DESC
  COLUMN_3_ASC
  COLUMN_3_DESC
  COLUMN_4_ASC
  COLUMN_4_DESC
  COLUMN_5_ASC
  COLUMN_5_DESC
  COLUMN_6_ASC
  COLUMN_6_DESC
  COLUMN_7_ASC
  COLUMN_7_DESC
  COLUMN_8_ASC
  COLUMN_8_DESC
  COLUMN_9_ASC
  COLUMN_9_DESC
  EVA_CHK_ASC
  EVA_CHK_DESC
  EVA_NAM_ASC
  EVA_NAM_DESC
  EVA_YMD_ASC
  EVA_YMD_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"Methods to use when ordering `EDetail`."
enum EDetailsOrderBy {
  CAT_FUNL_ASC
  CAT_FUNL_DESC
  CAT_FUNM_ASC
  CAT_FUNM_DESC
  CAT_FUNU_ASC
  CAT_FUNU_DESC
  CAT_IMPL_ASC
  CAT_IMPL_DESC
  CAT_IMPM_ASC
  CAT_IMPM_DESC
  CAT_IMPU_ASC
  CAT_IMPU_DESC
  DMG_SEWL_ASC
  DMG_SEWL_DESC
  DMG_SEWM_ASC
  DMG_SEWM_DESC
  DMG_SEWU_ASC
  DMG_SEWU_DESC
  DMG_SUBL_ASC
  DMG_SUBL_DESC
  DMG_SUBM_ASC
  DMG_SUBM_DESC
  DMG_SUBU_ASC
  DMG_SUBU_DESC
  ETC_POSL_ASC
  ETC_POSL_DESC
  ETC_POSM_ASC
  ETC_POSM_DESC
  ETC_POSU_ASC
  ETC_POSU_DESC
  EVA_INFL_ASC
  EVA_INFL_DESC
  EVA_INFM_ASC
  EVA_INFM_DESC
  EVA_INFU_ASC
  EVA_INFU_DESC
  EVA_OPEL_ASC
  EVA_OPEL_DESC
  EVA_OPEM_ASC
  EVA_OPEM_DESC
  EVA_OPEU_ASC
  EVA_OPEU_DESC
  EVA_OPIL_ASC
  EVA_OPIL_DESC
  EVA_OPIM_ASC
  EVA_OPIM_DESC
  EVA_OPIU_ASC
  EVA_OPIU_DESC
  EVA_POSL_ASC
  EVA_POSL_DESC
  EVA_POSM_ASC
  EVA_POSM_DESC
  EVA_POSU_ASC
  EVA_POSU_DESC
  EVA_PRXL_ASC
  EVA_PRXL_DESC
  EVA_PRXM_ASC
  EVA_PRXM_DESC
  EVA_PRXU_ASC
  EVA_PRXU_DESC
  EVA_RIVL_ASC
  EVA_RIVL_DESC
  EVA_RIVM_ASC
  EVA_RIVM_DESC
  EVA_RIVU_ASC
  EVA_RIVU_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FUN_FLAL_ASC
  FUN_FLAL_DESC
  FUN_FLAM_ASC
  FUN_FLAM_DESC
  FUN_FLAU_ASC
  FUN_FLAU_DESC
  FUN_PAVL_ASC
  FUN_PAVL_DESC
  FUN_PAVM_ASC
  FUN_PAVM_DESC
  FUN_PAVU_ASC
  FUN_PAVU_DESC
  FUN_UNPL_ASC
  FUN_UNPL_DESC
  FUN_UNPM_ASC
  FUN_UNPM_DESC
  FUN_UNPU_ASC
  FUN_UNPU_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STR_PAVL_ASC
  STR_PAVL_DESC
  STR_PAVM_ASC
  STR_PAVM_DESC
  STR_PAVU_ASC
  STR_PAVU_DESC
  STR_SAFL_ASC
  STR_SAFL_DESC
  STR_SAFM_ASC
  STR_SAFM_DESC
  STR_SAFU_ASC
  STR_SAFU_DESC
  STR_SHPL_ASC
  STR_SHPL_DESC
  STR_SHPM_ASC
  STR_SHPM_DESC
  STR_SHPU_ASC
  STR_SHPU_DESC
  STR_SNKL_ASC
  STR_SNKL_DESC
  STR_SNKM_ASC
  STR_SNKM_DESC
  STR_SNKU_ASC
  STR_SNKU_DESC
  STR_WIDL_ASC
  STR_WIDL_DESC
  STR_WIDM_ASC
  STR_WIDM_DESC
  STR_WIDU_ASC
  STR_WIDU_DESC
}

"Methods to use when ordering `EFacility`."
enum EFacilitiesOrderBy {
  BEN_TXT_ASC
  BEN_TXT_DESC
  EXM_CHK_ASC
  EXM_CHK_DESC
  EXM_NAM_ASC
  EXM_NAM_DESC
  EXM_OPI_ASC
  EXM_OPI_DESC
  EXM_YMD_ASC
  EXM_YMD_DESC
  FAC_ADL_ASC
  FAC_ADL_DESC
  FAC_ADM_ASC
  FAC_ADM_DESC
  FAC_ADU_ASC
  FAC_ADU_DESC
  FAC_LEN_ASC
  FAC_LEN_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_PID_ASC
  FAC_PID_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FAC_WID_ASC
  FAC_WID_DESC
  FUN_CDE_ASC
  FUN_CDE_DESC
  GEOM_ASC
  GEOM_DESC
  HZD_UID_ASC
  HZD_UID_DESC
  HZD_YMD_ASC
  HZD_YMD_DESC
  IMG_FAC_ASC
  IMG_FAC_DESC
  IMG_REP_ASC
  IMG_REP_DESC
  MNG_NAM_ASC
  MNG_NAM_DESC
  MNG_TEL_ASC
  MNG_TEL_DESC
  NATURAL
  OWN_NAM_ASC
  OWN_NAM_DESC
  POS_CDE_ASC
  POS_CDE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUB_CNT_ASC
  SUB_CNT_DESC
  SUB_TXT_ASC
  SUB_TXT_DESC
}

"Methods to use when ordering `ERiskEvaluation`."
enum ERiskEvaluationsOrderBy {
  COLUMN_10L_ASC
  COLUMN_10L_DESC
  COLUMN_10M_ASC
  COLUMN_10M_DESC
  COLUMN_10U_ASC
  COLUMN_10U_DESC
  COLUMN_1L_ASC
  COLUMN_1L_DESC
  COLUMN_1M_ASC
  COLUMN_1M_DESC
  COLUMN_1U_ASC
  COLUMN_1U_DESC
  COLUMN_2L_ASC
  COLUMN_2L_DESC
  COLUMN_2M_ASC
  COLUMN_2M_DESC
  COLUMN_2U_ASC
  COLUMN_2U_DESC
  COLUMN_3L_ASC
  COLUMN_3L_DESC
  COLUMN_3M_ASC
  COLUMN_3M_DESC
  COLUMN_3U_ASC
  COLUMN_3U_DESC
  COLUMN_4L_ASC
  COLUMN_4L_DESC
  COLUMN_4M_ASC
  COLUMN_4M_DESC
  COLUMN_4U_ASC
  COLUMN_4U_DESC
  COLUMN_5L_ASC
  COLUMN_5L_DESC
  COLUMN_5M_ASC
  COLUMN_5M_DESC
  COLUMN_5U_ASC
  COLUMN_5U_DESC
  COLUMN_6L_ASC
  COLUMN_6L_DESC
  COLUMN_6M_ASC
  COLUMN_6M_DESC
  COLUMN_6U_ASC
  COLUMN_6U_DESC
  COLUMN_7L_ASC
  COLUMN_7L_DESC
  COLUMN_7M_ASC
  COLUMN_7M_DESC
  COLUMN_7U_ASC
  COLUMN_7U_DESC
  COLUMN_8L_ASC
  COLUMN_8L_DESC
  COLUMN_8M_ASC
  COLUMN_8M_DESC
  COLUMN_8U_ASC
  COLUMN_8U_DESC
  COLUMN_9L_ASC
  COLUMN_9L_DESC
  COLUMN_9M_ASC
  COLUMN_9M_DESC
  COLUMN_9U_ASC
  COLUMN_9U_DESC
  EVA_CHK_ASC
  EVA_CHK_DESC
  EVA_NAM_ASC
  EVA_NAM_DESC
  EVA_YMD_ASC
  EVA_YMD_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"Methods to use when ordering `FDetail`."
enum FDetailsOrderBy {
  CAT_FUNL_ASC
  CAT_FUNL_DESC
  CAT_FUNM_ASC
  CAT_FUNM_DESC
  CAT_FUNU_ASC
  CAT_FUNU_DESC
  CAT_IMPL_ASC
  CAT_IMPL_DESC
  CAT_IMPM_ASC
  CAT_IMPM_DESC
  CAT_IMPU_ASC
  CAT_IMPU_DESC
  DMG_SEWL_ASC
  DMG_SEWL_DESC
  DMG_SEWM_ASC
  DMG_SEWM_DESC
  DMG_SEWU_ASC
  DMG_SEWU_DESC
  DMG_SUBL_ASC
  DMG_SUBL_DESC
  DMG_SUBM_ASC
  DMG_SUBM_DESC
  DMG_SUBU_ASC
  DMG_SUBU_DESC
  ETC_POSL_ASC
  ETC_POSL_DESC
  ETC_POSM_ASC
  ETC_POSM_DESC
  ETC_POSU_ASC
  ETC_POSU_DESC
  EVA_INFL_ASC
  EVA_INFL_DESC
  EVA_INFM_ASC
  EVA_INFM_DESC
  EVA_INFU_ASC
  EVA_INFU_DESC
  EVA_OPEL_ASC
  EVA_OPEL_DESC
  EVA_OPEM_ASC
  EVA_OPEM_DESC
  EVA_OPEU_ASC
  EVA_OPEU_DESC
  EVA_OPIL_ASC
  EVA_OPIL_DESC
  EVA_OPIM_ASC
  EVA_OPIM_DESC
  EVA_OPIU_ASC
  EVA_OPIU_DESC
  EVA_POSL_ASC
  EVA_POSL_DESC
  EVA_POSM_ASC
  EVA_POSM_DESC
  EVA_POSU_ASC
  EVA_POSU_DESC
  EVA_PRXL_ASC
  EVA_PRXL_DESC
  EVA_PRXM_ASC
  EVA_PRXM_DESC
  EVA_PRXU_ASC
  EVA_PRXU_DESC
  EVA_RIVL_ASC
  EVA_RIVL_DESC
  EVA_RIVM_ASC
  EVA_RIVM_DESC
  EVA_RIVU_ASC
  EVA_RIVU_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FUN_FLAL_ASC
  FUN_FLAL_DESC
  FUN_FLAM_ASC
  FUN_FLAM_DESC
  FUN_FLAU_ASC
  FUN_FLAU_DESC
  FUN_PAVL_ASC
  FUN_PAVL_DESC
  FUN_PAVM_ASC
  FUN_PAVM_DESC
  FUN_PAVU_ASC
  FUN_PAVU_DESC
  FUN_UNPL_ASC
  FUN_UNPL_DESC
  FUN_UNPM_ASC
  FUN_UNPM_DESC
  FUN_UNPU_ASC
  FUN_UNPU_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STR_PAVL_ASC
  STR_PAVL_DESC
  STR_PAVM_ASC
  STR_PAVM_DESC
  STR_PAVU_ASC
  STR_PAVU_DESC
  STR_SAFL_ASC
  STR_SAFL_DESC
  STR_SAFM_ASC
  STR_SAFM_DESC
  STR_SAFU_ASC
  STR_SAFU_DESC
  STR_SHPL_ASC
  STR_SHPL_DESC
  STR_SHPM_ASC
  STR_SHPM_DESC
  STR_SHPU_ASC
  STR_SHPU_DESC
  STR_SNKL_ASC
  STR_SNKL_DESC
  STR_SNKM_ASC
  STR_SNKM_DESC
  STR_SNKU_ASC
  STR_SNKU_DESC
  STR_WIDL_ASC
  STR_WIDL_DESC
  STR_WIDM_ASC
  STR_WIDM_DESC
  STR_WIDU_ASC
  STR_WIDU_DESC
}

"Methods to use when ordering `FFacility`."
enum FFacilitiesOrderBy {
  BEN_TXT_ASC
  BEN_TXT_DESC
  EXM_CHK_ASC
  EXM_CHK_DESC
  EXM_NAM_ASC
  EXM_NAM_DESC
  EXM_OPI_ASC
  EXM_OPI_DESC
  EXM_YMD_ASC
  EXM_YMD_DESC
  FAC_ADL_ASC
  FAC_ADL_DESC
  FAC_ADM_ASC
  FAC_ADM_DESC
  FAC_ADU_ASC
  FAC_ADU_DESC
  FAC_LEN_ASC
  FAC_LEN_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_PID_ASC
  FAC_PID_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  FAC_WID_ASC
  FAC_WID_DESC
  FUN_CDE_ASC
  FUN_CDE_DESC
  GEOM_ASC
  GEOM_DESC
  HZD_UID_ASC
  HZD_UID_DESC
  HZD_YMD_ASC
  HZD_YMD_DESC
  IMG_FAC_ASC
  IMG_FAC_DESC
  IMG_REP_ASC
  IMG_REP_DESC
  MNG_NAM_ASC
  MNG_NAM_DESC
  MNG_TEL_ASC
  MNG_TEL_DESC
  NATURAL
  OWN_NAM_ASC
  OWN_NAM_DESC
  POS_CDE_ASC
  POS_CDE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUB_CNT_ASC
  SUB_CNT_DESC
  SUB_TXT_ASC
  SUB_TXT_DESC
}

"Methods to use when ordering `FRiskEvaluation`."
enum FRiskEvaluationsOrderBy {
  COLUMN_10L_ASC
  COLUMN_10L_DESC
  COLUMN_10M_ASC
  COLUMN_10M_DESC
  COLUMN_10U_ASC
  COLUMN_10U_DESC
  COLUMN_1L_ASC
  COLUMN_1L_DESC
  COLUMN_1M_ASC
  COLUMN_1M_DESC
  COLUMN_1U_ASC
  COLUMN_1U_DESC
  COLUMN_2L_ASC
  COLUMN_2L_DESC
  COLUMN_2M_ASC
  COLUMN_2M_DESC
  COLUMN_2U_ASC
  COLUMN_2U_DESC
  COLUMN_3L_ASC
  COLUMN_3L_DESC
  COLUMN_3M_ASC
  COLUMN_3M_DESC
  COLUMN_3U_ASC
  COLUMN_3U_DESC
  COLUMN_4L_ASC
  COLUMN_4L_DESC
  COLUMN_4M_ASC
  COLUMN_4M_DESC
  COLUMN_4U_ASC
  COLUMN_4U_DESC
  COLUMN_5L_ASC
  COLUMN_5L_DESC
  COLUMN_5M_ASC
  COLUMN_5M_DESC
  COLUMN_5U_ASC
  COLUMN_5U_DESC
  COLUMN_6L_ASC
  COLUMN_6L_DESC
  COLUMN_6M_ASC
  COLUMN_6M_DESC
  COLUMN_6U_ASC
  COLUMN_6U_DESC
  COLUMN_7L_ASC
  COLUMN_7L_DESC
  COLUMN_7M_ASC
  COLUMN_7M_DESC
  COLUMN_7U_ASC
  COLUMN_7U_DESC
  COLUMN_8L_ASC
  COLUMN_8L_DESC
  COLUMN_8M_ASC
  COLUMN_8M_DESC
  COLUMN_8U_ASC
  COLUMN_8U_DESC
  COLUMN_9L_ASC
  COLUMN_9L_DESC
  COLUMN_9M_ASC
  COLUMN_9M_DESC
  COLUMN_9U_ASC
  COLUMN_9U_DESC
  EVA_CHK_ASC
  EVA_CHK_DESC
  EVA_NAM_ASC
  EVA_NAM_DESC
  EVA_YMD_ASC
  EVA_YMD_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum Selection {
  _0
  _1
  _2
  _3
  _4
}

"Methods to use when ordering `ViewCadaster`."
enum ViewCadastersOrderBy {
  BJD_CDE_ASC
  BJD_CDE_DESC
  BJD_NAM_ASC
  BJD_NAM_DESC
  GEOM_ASC
  GEOM_DESC
  HJD_NAM_ASC
  HJD_NAM_DESC
  JIBUN_ASC
  JIBUN_DESC
  NATURAL
  PNU_ASC
  PNU_DESC
}

"Methods to use when ordering `ViewFacility`."
enum ViewFacilitiesOrderBy {
  BJD_CDE_ASC
  BJD_CDE_DESC
  BJD_NAM_ASC
  BJD_NAM_DESC
  EXM_CHK_ASC
  EXM_CHK_DESC
  EXM_YMD_ASC
  EXM_YMD_DESC
  FAC_ADM_ASC
  FAC_ADM_DESC
  FAC_NAM_ASC
  FAC_NAM_DESC
  FAC_TYP_ASC
  FAC_TYP_DESC
  FAC_UID_ASC
  FAC_UID_DESC
  GEOM_ASC
  GEOM_DESC
  HJD_NAM_ASC
  HJD_NAM_DESC
  NATURAL
  TYP_NAM_ASC
  TYP_NAM_DESC
}

"Methods to use when ordering `ViewRegion`."
enum ViewRegionsOrderBy {
  BJD_CDE_ASC
  BJD_CDE_DESC
  BJD_NAM_ASC
  BJD_NAM_DESC
  GEOM_ASC
  GEOM_DESC
  HJD_NAM_ASC
  HJD_NAM_DESC
  NATURAL
}

"A floating point number that requires more precision than IEEE 754 binary 64"
scalar BigFloat

"A location in a connection that can be used for resuming pagination."
scalar Cursor

"""

A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A condition to be used against `ADetail` object types. All fields are tested for equality and combined with a logical ‘and.’"
input ADetailCondition {
  "Checks for equality with the object’s `catFun` field."
  catFun: Selection
  "Checks for equality with the object’s `catImp` field."
  catImp: Selection
  "Checks for equality with the object’s `catPos` field."
  catPos: Selection
  "Checks for equality with the object’s `catTyp` field."
  catTyp: Selection
  "Checks for equality with the object’s `etcTrf` field."
  etcTrf: Selection
  "Checks for equality with the object’s `etcTrh` field."
  etcTrh: Selection
  "Checks for equality with the object’s `evaInf` field."
  evaInf: Selection
  "Checks for equality with the object’s `evaOpe` field."
  evaOpe: Selection
  "Checks for equality with the object’s `evaOpi` field."
  evaOpi: String
  "Checks for equality with the object’s `evaPxm` field."
  evaPxm: Selection
  "Checks for equality with the object’s `evaRoa` field."
  evaRoa: Selection
  "Checks for equality with the object’s `evaStt` field."
  evaStt: Selection
  "Checks for equality with the object’s `evaSur` field."
  evaSur: Selection
  "Checks for equality with the object’s `facGap` field."
  facGap: BigFloat
  "Checks for equality with the object’s `facHgt` field."
  facHgt: BigFloat
  "Checks for equality with the object’s `facLen` field."
  facLen: BigFloat
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `facWid` field."
  facWid: BigFloat
  "Checks for equality with the object’s `fldDmg` field."
  fldDmg: Selection
  "Checks for equality with the object’s `fldWal` field."
  fldWal: Selection
  "Checks for equality with the object’s `rivLow` field."
  rivLow: BigFloat
  "Checks for equality with the object’s `rivMid` field."
  rivMid: BigFloat
  "Checks for equality with the object’s `rivUpp` field."
  rivUpp: BigFloat
  "Checks for equality with the object’s `secCol` field."
  secCol: Int
  "Checks for equality with the object’s `secDia` field."
  secDia: BigFloat
  "Checks for equality with the object’s `secFlr` field."
  secFlr: Selection
  "Checks for equality with the object’s `secHgt` field."
  secHgt: BigFloat
  "Checks for equality with the object’s `secWid` field."
  secWid: BigFloat
  "Checks for equality with the object’s `strDmg` field."
  strDmg: Selection
  "Checks for equality with the object’s `strHol` field."
  strHol: Selection
  "Checks for equality with the object’s `strOld` field."
  strOld: Selection
  "Checks for equality with the object’s `strReb` field."
  strReb: Selection
}

"An input for mutations affecting `ADetail`"
input ADetailInput {
  catFun: Selection
  catImp: Selection
  catPos: Selection
  catTyp: Selection
  etcTrf: Selection
  etcTrh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaPxm: Selection
  evaRoa: Selection
  evaStt: Selection
  evaSur: Selection
  facGap: BigFloat
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String!
  facWid: BigFloat
  fldDmg: Selection
  fldWal: Selection
  rivLow: BigFloat
  rivMid: BigFloat
  rivUpp: BigFloat
  secCol: Int
  secDia: BigFloat
  secFlr: Selection
  secHgt: BigFloat
  secWid: BigFloat
  strDmg: Selection
  strHol: Selection
  strOld: Selection
  strReb: Selection
}

"Represents an update to a `ADetail`. Fields that are set will be updated."
input ADetailPatch {
  catFun: Selection
  catImp: Selection
  catPos: Selection
  catTyp: Selection
  etcTrf: Selection
  etcTrh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaPxm: Selection
  evaRoa: Selection
  evaStt: Selection
  evaSur: Selection
  facGap: BigFloat
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String
  facWid: BigFloat
  fldDmg: Selection
  fldWal: Selection
  rivLow: BigFloat
  rivMid: BigFloat
  rivUpp: BigFloat
  secCol: Int
  secDia: BigFloat
  secFlr: Selection
  secHgt: BigFloat
  secWid: BigFloat
  strDmg: Selection
  strHol: Selection
  strOld: Selection
  strReb: Selection
}

"""

A condition to be used against `AFacility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AFacilityCondition {
  "Checks for equality with the object’s `benTxt` field."
  benTxt: String
  "Checks for equality with the object’s `catCde` field."
  catCde: Selection
  "Checks for equality with the object’s `exmChk` field."
  exmChk: Selection
  "Checks for equality with the object’s `exmNam` field."
  exmNam: String
  "Checks for equality with the object’s `exmOpi` field."
  exmOpi: String
  "Checks for equality with the object’s `exmYmd` field."
  exmYmd: Datetime
  "Checks for equality with the object’s `facAdm` field."
  facAdm: String
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facPid` field."
  facPid: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `funCde` field."
  funCde: [Selection]
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hzdUid` field."
  hzdUid: String
  "Checks for equality with the object’s `hzdYmd` field."
  hzdYmd: Datetime
  "Checks for equality with the object’s `imgFac` field."
  imgFac: JSON
  "Checks for equality with the object’s `imgRep` field."
  imgRep: JSON
  "Checks for equality with the object’s `mngNam` field."
  mngNam: String
  "Checks for equality with the object’s `mngTel` field."
  mngTel: String
  "Checks for equality with the object’s `ownNam` field."
  ownNam: String
  "Checks for equality with the object’s `posCde` field."
  posCde: [Selection]
  "Checks for equality with the object’s `posNam` field."
  posNam: String
  "Checks for equality with the object’s `subCnt` field."
  subCnt: Int
  "Checks for equality with the object’s `subTxt` field."
  subTxt: String
  "Checks for equality with the object’s `typCde` field."
  typCde: [Selection]
  "Checks for equality with the object’s `typTxt` field."
  typTxt: String
}

"An input for mutations affecting `AFacility`"
input AFacilityInput {
  benTxt: String
  catCde: Selection
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String!
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
  typCde: [Selection]
  typTxt: String
}

"Represents an update to a `AFacility`. Fields that are set will be updated."
input AFacilityPatch {
  benTxt: String
  catCde: Selection
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
  typCde: [Selection]
  typTxt: String
}

"""

A condition to be used against `ARiskEvaluation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ARiskEvaluationCondition {
  "Checks for equality with the object’s `column1` field."
  column1: Int
  "Checks for equality with the object’s `column10` field."
  column10: Int
  "Checks for equality with the object’s `column2` field."
  column2: Int
  "Checks for equality with the object’s `column3` field."
  column3: Int
  "Checks for equality with the object’s `column4` field."
  column4: Int
  "Checks for equality with the object’s `column5` field."
  column5: Int
  "Checks for equality with the object’s `column6` field."
  column6: Int
  "Checks for equality with the object’s `column7` field."
  column7: Int
  "Checks for equality with the object’s `column8` field."
  column8: Int
  "Checks for equality with the object’s `column9` field."
  column9: Int
  "Checks for equality with the object’s `evaChk` field."
  evaChk: Selection
  "Checks for equality with the object’s `evaNam` field."
  evaNam: String
  "Checks for equality with the object’s `evaYmd` field."
  evaYmd: Datetime
  "Checks for equality with the object’s `facUid` field."
  facUid: String
}

"An input for mutations affecting `ARiskEvaluation`"
input ARiskEvaluationInput {
  column1: Int
  column10: Int
  column2: Int
  column3: Int
  column4: Int
  column5: Int
  column6: Int
  column7: Int
  column8: Int
  column9: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
}

"Represents an update to a `ARiskEvaluation`. Fields that are set will be updated."
input ARiskEvaluationPatch {
  column1: Int
  column10: Int
  column2: Int
  column3: Int
  column4: Int
  column5: Int
  column6: Int
  column7: Int
  column8: Int
  column9: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String
}

"A condition to be used against `BBasin` object types. All fields are tested for equality and combined with a logical ‘and.’"
input BBasinCondition {
  "Checks for equality with the object’s `columnName` field."
  columnName: String
  "Checks for equality with the object’s `columnName2` field."
  columnName2: String
  "Checks for equality with the object’s `columnName3` field."
  columnName3: String
  "Checks for equality with the object’s `columnName4` field."
  columnName4: String
  "Checks for equality with the object’s `columnName5` field."
  columnName5: String
  "Checks for equality with the object’s `columnName6` field."
  columnName6: BigFloat
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `facUml` field."
  facUml: String
  "Checks for equality with the object’s `geom` field."
  geom: String
}

"An input for mutations affecting `BBasin`"
input BBasinInput {
  columnName: String
  columnName2: String
  columnName3: String
  columnName4: String
  columnName5: String
  columnName6: BigFloat
  facNam: String
  facUid: String!
  facUml: String!
  geom: String
}

"Represents an update to a `BBasin`. Fields that are set will be updated."
input BBasinPatch {
  columnName: String
  columnName2: String
  columnName3: String
  columnName4: String
  columnName5: String
  columnName6: BigFloat
  facNam: String
  facUid: String
  facUml: String
  geom: String
}

"A condition to be used against `BDetail` object types. All fields are tested for equality and combined with a logical ‘and.’"
input BDetailCondition {
  "Checks for equality with the object’s `bnkHgtl` field."
  bnkHgtl: BigFloat
  "Checks for equality with the object’s `bnkHgtm` field."
  bnkHgtm: BigFloat
  "Checks for equality with the object’s `bnkHgtu` field."
  bnkHgtu: BigFloat
  "Checks for equality with the object’s `bnkStll` field."
  bnkStll: Selection
  "Checks for equality with the object’s `bnkStlm` field."
  bnkStlm: Selection
  "Checks for equality with the object’s `bnkStlu` field."
  bnkStlu: Selection
  "Checks for equality with the object’s `bnkStrl` field."
  bnkStrl: Selection
  "Checks for equality with the object’s `bnkStrm` field."
  bnkStrm: Selection
  "Checks for equality with the object’s `bnkStru` field."
  bnkStru: Selection
  "Checks for equality with the object’s `catFunl` field."
  catFunl: Selection
  "Checks for equality with the object’s `catFunm` field."
  catFunm: Selection
  "Checks for equality with the object’s `catFunu` field."
  catFunu: Selection
  "Checks for equality with the object’s `catImpl` field."
  catImpl: Selection
  "Checks for equality with the object’s `catImpm` field."
  catImpm: Selection
  "Checks for equality with the object’s `catImpu` field."
  catImpu: Selection
  "Checks for equality with the object’s `crnWdll` field."
  crnWdll: BigFloat
  "Checks for equality with the object’s `crnWdlm` field."
  crnWdlm: BigFloat
  "Checks for equality with the object’s `crnWdlu` field."
  crnWdlu: BigFloat
  "Checks for equality with the object’s `crnWdrl` field."
  crnWdrl: BigFloat
  "Checks for equality with the object’s `crnWdrm` field."
  crnWdrm: BigFloat
  "Checks for equality with the object’s `crnWdru` field."
  crnWdru: BigFloat
  "Checks for equality with the object’s `dmgLifl` field."
  dmgLifl: Selection
  "Checks for equality with the object’s `dmgLifm` field."
  dmgLifm: Selection
  "Checks for equality with the object’s `dmgLifu` field."
  dmgLifu: Selection
  "Checks for equality with the object’s `dmgProl` field."
  dmgProl: Selection
  "Checks for equality with the object’s `dmgProm` field."
  dmgProm: Selection
  "Checks for equality with the object’s `dmgProu` field."
  dmgProu: Selection
  "Checks for equality with the object’s `dmgTxtl` field."
  dmgTxtl: String
  "Checks for equality with the object’s `dmgTxtm` field."
  dmgTxtm: String
  "Checks for equality with the object’s `dmgTxtu` field."
  dmgTxtu: String
  "Checks for equality with the object’s `dorPasl` field."
  dorPasl: Selection
  "Checks for equality with the object’s `dorPasm` field."
  dorPasm: Selection
  "Checks for equality with the object’s `dorPasu` field."
  dorPasu: Selection
  "Checks for equality with the object’s `evaInfl` field."
  evaInfl: Selection
  "Checks for equality with the object’s `evaInfm` field."
  evaInfm: Selection
  "Checks for equality with the object’s `evaInfu` field."
  evaInfu: Selection
  "Checks for equality with the object’s `evaOpel` field."
  evaOpel: Selection
  "Checks for equality with the object’s `evaOpem` field."
  evaOpem: Selection
  "Checks for equality with the object’s `evaOpeu` field."
  evaOpeu: Selection
  "Checks for equality with the object’s `evaOpil` field."
  evaOpil: String
  "Checks for equality with the object’s `evaOpim` field."
  evaOpim: String
  "Checks for equality with the object’s `evaOpiu` field."
  evaOpiu: String
  "Checks for equality with the object’s `evaPrxl` field."
  evaPrxl: Selection
  "Checks for equality with the object’s `evaPrxm` field."
  evaPrxm: Selection
  "Checks for equality with the object’s `evaPrxu` field."
  evaPrxu: Selection
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `fldCdel` field."
  fldCdel: Selection
  "Checks for equality with the object’s `fldCdem` field."
  fldCdem: Selection
  "Checks for equality with the object’s `fldCdeu` field."
  fldCdeu: Selection
  "Checks for equality with the object’s `fldTxtl` field."
  fldTxtl: String
  "Checks for equality with the object’s `fldTxtm` field."
  fldTxtm: String
  "Checks for equality with the object’s `fldTxtu` field."
  fldTxtu: String
  "Checks for equality with the object’s `revMall` field."
  revMall: Selection
  "Checks for equality with the object’s `revMalm` field."
  revMalm: Selection
  "Checks for equality with the object’s `revMalu` field."
  revMalu: Selection
  "Checks for equality with the object’s `revMarl` field."
  revMarl: Selection
  "Checks for equality with the object’s `revMarm` field."
  revMarm: Selection
  "Checks for equality with the object’s `revMaru` field."
  revMaru: Selection
  "Checks for equality with the object’s `revStll` field."
  revStll: Selection
  "Checks for equality with the object’s `revStlm` field."
  revStlm: Selection
  "Checks for equality with the object’s `revStlu` field."
  revStlu: Selection
  "Checks for equality with the object’s `revStrl` field."
  revStrl: Selection
  "Checks for equality with the object’s `revStrm` field."
  revStrm: Selection
  "Checks for equality with the object’s `revStru` field."
  revStru: Selection
  "Checks for equality with the object’s `rivChgl` field."
  rivChgl: Selection
  "Checks for equality with the object’s `rivChgm` field."
  rivChgm: Selection
  "Checks for equality with the object’s `rivChgu` field."
  rivChgu: Selection
  "Checks for equality with the object’s `rivDepl` field."
  rivDepl: Selection
  "Checks for equality with the object’s `rivDepm` field."
  rivDepm: Selection
  "Checks for equality with the object’s `rivDepu` field."
  rivDepu: Selection
  "Checks for equality with the object’s `rivDmgl` field."
  rivDmgl: Selection
  "Checks for equality with the object’s `rivDmgm` field."
  rivDmgm: Selection
  "Checks for equality with the object’s `rivDmgu` field."
  rivDmgu: Selection
  "Checks for equality with the object’s `rivPltl` field."
  rivPltl: Selection
  "Checks for equality with the object’s `rivPltm` field."
  rivPltm: Selection
  "Checks for equality with the object’s `rivPltu` field."
  rivPltu: Selection
  "Checks for equality with the object’s `rivPosl` field."
  rivPosl: Selection
  "Checks for equality with the object’s `rivPosm` field."
  rivPosm: Selection
  "Checks for equality with the object’s `rivPosu` field."
  rivPosu: Selection
  "Checks for equality with the object’s `rivWidl` field."
  rivWidl: BigFloat
  "Checks for equality with the object’s `rivWidm` field."
  rivWidm: BigFloat
  "Checks for equality with the object’s `rivWidu` field."
  rivWidu: BigFloat
}

"An input for mutations affecting `BDetail`"
input BDetailInput {
  bnkHgtl: BigFloat
  bnkHgtm: BigFloat
  bnkHgtu: BigFloat
  bnkStll: Selection
  bnkStlm: Selection
  bnkStlu: Selection
  bnkStrl: Selection
  bnkStrm: Selection
  bnkStru: Selection
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  crnWdll: BigFloat
  crnWdlm: BigFloat
  crnWdlu: BigFloat
  crnWdrl: BigFloat
  crnWdrm: BigFloat
  crnWdru: BigFloat
  dmgLifl: Selection
  dmgLifm: Selection
  dmgLifu: Selection
  dmgProl: Selection
  dmgProm: Selection
  dmgProu: Selection
  dmgTxtl: String
  dmgTxtm: String
  dmgTxtu: String
  dorPasl: Selection
  dorPasm: Selection
  dorPasu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  facUid: String!
  fldCdel: Selection
  fldCdem: Selection
  fldCdeu: Selection
  fldTxtl: String
  fldTxtm: String
  fldTxtu: String
  revMall: Selection
  revMalm: Selection
  revMalu: Selection
  revMarl: Selection
  revMarm: Selection
  revMaru: Selection
  revStll: Selection
  revStlm: Selection
  revStlu: Selection
  revStrl: Selection
  revStrm: Selection
  revStru: Selection
  rivChgl: Selection
  rivChgm: Selection
  rivChgu: Selection
  rivDepl: Selection
  rivDepm: Selection
  rivDepu: Selection
  rivDmgl: Selection
  rivDmgm: Selection
  rivDmgu: Selection
  rivPltl: Selection
  rivPltm: Selection
  rivPltu: Selection
  rivPosl: Selection
  rivPosm: Selection
  rivPosu: Selection
  rivWidl: BigFloat
  rivWidm: BigFloat
  rivWidu: BigFloat
}

"Represents an update to a `BDetail`. Fields that are set will be updated."
input BDetailPatch {
  bnkHgtl: BigFloat
  bnkHgtm: BigFloat
  bnkHgtu: BigFloat
  bnkStll: Selection
  bnkStlm: Selection
  bnkStlu: Selection
  bnkStrl: Selection
  bnkStrm: Selection
  bnkStru: Selection
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  crnWdll: BigFloat
  crnWdlm: BigFloat
  crnWdlu: BigFloat
  crnWdrl: BigFloat
  crnWdrm: BigFloat
  crnWdru: BigFloat
  dmgLifl: Selection
  dmgLifm: Selection
  dmgLifu: Selection
  dmgProl: Selection
  dmgProm: Selection
  dmgProu: Selection
  dmgTxtl: String
  dmgTxtm: String
  dmgTxtu: String
  dorPasl: Selection
  dorPasm: Selection
  dorPasu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  facUid: String
  fldCdel: Selection
  fldCdem: Selection
  fldCdeu: Selection
  fldTxtl: String
  fldTxtm: String
  fldTxtu: String
  revMall: Selection
  revMalm: Selection
  revMalu: Selection
  revMarl: Selection
  revMarm: Selection
  revMaru: Selection
  revStll: Selection
  revStlm: Selection
  revStlu: Selection
  revStrl: Selection
  revStrm: Selection
  revStru: Selection
  rivChgl: Selection
  rivChgm: Selection
  rivChgu: Selection
  rivDepl: Selection
  rivDepm: Selection
  rivDepu: Selection
  rivDmgl: Selection
  rivDmgm: Selection
  rivDmgu: Selection
  rivPltl: Selection
  rivPltm: Selection
  rivPltu: Selection
  rivPosl: Selection
  rivPosm: Selection
  rivPosu: Selection
  rivWidl: BigFloat
  rivWidm: BigFloat
  rivWidu: BigFloat
}

"""

A condition to be used against `BFacility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BFacilityCondition {
  "Checks for equality with the object’s `benTxt` field."
  benTxt: String
  "Checks for equality with the object’s `exmChk` field."
  exmChk: Selection
  "Checks for equality with the object’s `exmNam` field."
  exmNam: String
  "Checks for equality with the object’s `exmOpi` field."
  exmOpi: String
  "Checks for equality with the object’s `exmYmd` field."
  exmYmd: Datetime
  "Checks for equality with the object’s `facAdl` field."
  facAdl: String
  "Checks for equality with the object’s `facAdm` field."
  facAdm: String
  "Checks for equality with the object’s `facAdu` field."
  facAdu: String
  "Checks for equality with the object’s `facLen` field."
  facLen: BigFloat
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facPid` field."
  facPid: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `facWid` field."
  facWid: BigFloat
  "Checks for equality with the object’s `funCde` field."
  funCde: [Selection]
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hzdUid` field."
  hzdUid: String
  "Checks for equality with the object’s `hzdYmd` field."
  hzdYmd: Datetime
  "Checks for equality with the object’s `imgFac` field."
  imgFac: JSON
  "Checks for equality with the object’s `imgRep` field."
  imgRep: JSON
  "Checks for equality with the object’s `mngNam` field."
  mngNam: String
  "Checks for equality with the object’s `mngTel` field."
  mngTel: String
  "Checks for equality with the object’s `ownNam` field."
  ownNam: String
  "Checks for equality with the object’s `posCde` field."
  posCde: [Selection]
  "Checks for equality with the object’s `posNam` field."
  posNam: String
  "Checks for equality with the object’s `subCnt` field."
  subCnt: Int
  "Checks for equality with the object’s `subTxt` field."
  subTxt: String
}

"An input for mutations affecting `BFacility`"
input BFacilityInput {
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String!
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

"Represents an update to a `BFacility`. Fields that are set will be updated."
input BFacilityPatch {
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

"""

A condition to be used against `BRiskEvaluation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BRiskEvaluationCondition {
  "Checks for equality with the object’s `column10L` field."
  column10L: Int
  "Checks for equality with the object’s `column10M` field."
  column10M: Int
  "Checks for equality with the object’s `column10U` field."
  column10U: Int
  "Checks for equality with the object’s `column1L` field."
  column1L: Int
  "Checks for equality with the object’s `column1M` field."
  column1M: Int
  "Checks for equality with the object’s `column1U` field."
  column1U: Int
  "Checks for equality with the object’s `column2L` field."
  column2L: Int
  "Checks for equality with the object’s `column2M` field."
  column2M: Int
  "Checks for equality with the object’s `column2U` field."
  column2U: Int
  "Checks for equality with the object’s `column3L` field."
  column3L: Int
  "Checks for equality with the object’s `column3M` field."
  column3M: Int
  "Checks for equality with the object’s `column3U` field."
  column3U: Int
  "Checks for equality with the object’s `column4L` field."
  column4L: Int
  "Checks for equality with the object’s `column4M` field."
  column4M: Int
  "Checks for equality with the object’s `column4U` field."
  column4U: Int
  "Checks for equality with the object’s `column5L` field."
  column5L: Int
  "Checks for equality with the object’s `column5M` field."
  column5M: Int
  "Checks for equality with the object’s `column5U` field."
  column5U: Int
  "Checks for equality with the object’s `column6L` field."
  column6L: Int
  "Checks for equality with the object’s `column6M` field."
  column6M: Int
  "Checks for equality with the object’s `column6U` field."
  column6U: Int
  "Checks for equality with the object’s `column7L` field."
  column7L: Int
  "Checks for equality with the object’s `column7M` field."
  column7M: Int
  "Checks for equality with the object’s `column7U` field."
  column7U: Int
  "Checks for equality with the object’s `column8L` field."
  column8L: Int
  "Checks for equality with the object’s `column8M` field."
  column8M: Int
  "Checks for equality with the object’s `column8U` field."
  column8U: Int
  "Checks for equality with the object’s `column9L` field."
  column9L: Int
  "Checks for equality with the object’s `column9M` field."
  column9M: Int
  "Checks for equality with the object’s `column9U` field."
  column9U: Int
  "Checks for equality with the object’s `evaChk` field."
  evaChk: Selection
  "Checks for equality with the object’s `evaNam` field."
  evaNam: String
  "Checks for equality with the object’s `evaYmd` field."
  evaYmd: Datetime
  "Checks for equality with the object’s `facUid` field."
  facUid: String
}

"An input for mutations affecting `BRiskEvaluation`"
input BRiskEvaluationInput {
  column10L: Int
  column10M: Int
  column10U: Int
  column1L: Int
  column1M: Int
  column1U: Int
  column2L: Int
  column2M: Int
  column2U: Int
  column3L: Int
  column3M: Int
  column3U: Int
  column4L: Int
  column4M: Int
  column4U: Int
  column5L: Int
  column5M: Int
  column5U: Int
  column6L: Int
  column6M: Int
  column6U: Int
  column7L: Int
  column7M: Int
  column7U: Int
  column8L: Int
  column8M: Int
  column8U: Int
  column9L: Int
  column9M: Int
  column9U: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
}

"Represents an update to a `BRiskEvaluation`. Fields that are set will be updated."
input BRiskEvaluationPatch {
  column10L: Int
  column10M: Int
  column10U: Int
  column1L: Int
  column1M: Int
  column1U: Int
  column2L: Int
  column2M: Int
  column2U: Int
  column3L: Int
  column3M: Int
  column3U: Int
  column4L: Int
  column4M: Int
  column4U: Int
  column5L: Int
  column5M: Int
  column5U: Int
  column6L: Int
  column6M: Int
  column6U: Int
  column7L: Int
  column7M: Int
  column7U: Int
  column8L: Int
  column8M: Int
  column8U: Int
  column9L: Int
  column9M: Int
  column9U: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String
}

"A condition to be used against `CDetail` object types. All fields are tested for equality and combined with a logical ‘and.’"
input CDetailCondition {
  "Checks for equality with the object’s `catImp` field."
  catImp: Selection
  "Checks for equality with the object’s `depStt` field."
  depStt: Selection
  "Checks for equality with the object’s `etcEnv` field."
  etcEnv: Selection
  "Checks for equality with the object’s `etcFsh` field."
  etcFsh: Selection
  "Checks for equality with the object’s `evaInf` field."
  evaInf: Selection
  "Checks for equality with the object’s `evaOpe` field."
  evaOpe: Selection
  "Checks for equality with the object’s `evaOpi` field."
  evaOpi: String
  "Checks for equality with the object’s `evaSur` field."
  evaSur: Selection
  "Checks for equality with the object’s `facHgt` field."
  facHgt: BigFloat
  "Checks for equality with the object’s `facLen` field."
  facLen: BigFloat
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `funMch` field."
  funMch: Selection
  "Checks for equality with the object’s `funStt` field."
  funStt: Selection
  "Checks for equality with the object’s `strBod` field."
  strBod: Selection
  "Checks for equality with the object’s `strFlr` field."
  strFlr: Selection
  "Checks for equality with the object’s `strHzd` field."
  strHzd: Selection
  "Checks for equality with the object’s `strJnt` field."
  strJnt: Selection
  "Checks for equality with the object’s `strWal` field."
  strWal: Selection
}

"An input for mutations affecting `CDetail`"
input CDetailInput {
  catImp: Selection
  depStt: Selection
  etcEnv: Selection
  etcFsh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaSur: Selection
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String!
  funMch: Selection
  funStt: Selection
  strBod: Selection
  strFlr: Selection
  strHzd: Selection
  strJnt: Selection
  strWal: Selection
}

"Represents an update to a `CDetail`. Fields that are set will be updated."
input CDetailPatch {
  catImp: Selection
  depStt: Selection
  etcEnv: Selection
  etcFsh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaSur: Selection
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String
  funMch: Selection
  funStt: Selection
  strBod: Selection
  strFlr: Selection
  strHzd: Selection
  strJnt: Selection
  strWal: Selection
}

"""

A condition to be used against `CFacility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CFacilityCondition {
  "Checks for equality with the object’s `benTxt` field."
  benTxt: String
  "Checks for equality with the object’s `catCde` field."
  catCde: String
  "Checks for equality with the object’s `exmChk` field."
  exmChk: Selection
  "Checks for equality with the object’s `exmNam` field."
  exmNam: String
  "Checks for equality with the object’s `exmOpi` field."
  exmOpi: String
  "Checks for equality with the object’s `exmYmd` field."
  exmYmd: Datetime
  "Checks for equality with the object’s `facAdm` field."
  facAdm: String
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facPid` field."
  facPid: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `funCde` field."
  funCde: [Selection]
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hzdUid` field."
  hzdUid: String
  "Checks for equality with the object’s `hzdYmd` field."
  hzdYmd: Datetime
  "Checks for equality with the object’s `imgFac` field."
  imgFac: JSON
  "Checks for equality with the object’s `imgRep` field."
  imgRep: JSON
  "Checks for equality with the object’s `mngNam` field."
  mngNam: String
  "Checks for equality with the object’s `mngTel` field."
  mngTel: String
  "Checks for equality with the object’s `ownNam` field."
  ownNam: String
  "Checks for equality with the object’s `posCde` field."
  posCde: [Selection]
  "Checks for equality with the object’s `posNam` field."
  posNam: String
  "Checks for equality with the object’s `subCnt` field."
  subCnt: Int
  "Checks for equality with the object’s `subTxt` field."
  subTxt: String
}

"An input for mutations affecting `CFacility`"
input CFacilityInput {
  benTxt: String
  catCde: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String!
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

"Represents an update to a `CFacility`. Fields that are set will be updated."
input CFacilityPatch {
  benTxt: String
  catCde: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

"""

A condition to be used against `CRiskEvaluation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CRiskEvaluationCondition {
  "Checks for equality with the object’s `column1` field."
  column1: Int
  "Checks for equality with the object’s `column10` field."
  column10: Int
  "Checks for equality with the object’s `column2` field."
  column2: Int
  "Checks for equality with the object’s `column3` field."
  column3: Int
  "Checks for equality with the object’s `column4` field."
  column4: Int
  "Checks for equality with the object’s `column5` field."
  column5: Int
  "Checks for equality with the object’s `column6` field."
  column6: Int
  "Checks for equality with the object’s `column7` field."
  column7: Int
  "Checks for equality with the object’s `column8` field."
  column8: Int
  "Checks for equality with the object’s `column9` field."
  column9: Int
  "Checks for equality with the object’s `evaChk` field."
  evaChk: Selection
  "Checks for equality with the object’s `evaNam` field."
  evaNam: String
  "Checks for equality with the object’s `evaYmd` field."
  evaYmd: Datetime
  "Checks for equality with the object’s `facUid` field."
  facUid: String
}

"An input for mutations affecting `CRiskEvaluation`"
input CRiskEvaluationInput {
  column1: Int
  column10: Int
  column2: Int
  column3: Int
  column4: Int
  column5: Int
  column6: Int
  column7: Int
  column8: Int
  column9: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
}

"Represents an update to a `CRiskEvaluation`. Fields that are set will be updated."
input CRiskEvaluationPatch {
  column1: Int
  column10: Int
  column2: Int
  column3: Int
  column4: Int
  column5: Int
  column6: Int
  column7: Int
  column8: Int
  column9: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String
}

"All input for the create `ADetail` mutation."
input CreateADetailInput {
  "The `ADetail` to be created by this mutation."
  aDetail: ADetailInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `AFacility` mutation."
input CreateAFacilityInput {
  "The `AFacility` to be created by this mutation."
  aFacility: AFacilityInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `ARiskEvaluation` mutation."
input CreateARiskEvaluationInput {
  "The `ARiskEvaluation` to be created by this mutation."
  aRiskEvaluation: ARiskEvaluationInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `BBasin` mutation."
input CreateBBasinInput {
  "The `BBasin` to be created by this mutation."
  bBasin: BBasinInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `BDetail` mutation."
input CreateBDetailInput {
  "The `BDetail` to be created by this mutation."
  bDetail: BDetailInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `BFacility` mutation."
input CreateBFacilityInput {
  "The `BFacility` to be created by this mutation."
  bFacility: BFacilityInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `BRiskEvaluation` mutation."
input CreateBRiskEvaluationInput {
  "The `BRiskEvaluation` to be created by this mutation."
  bRiskEvaluation: BRiskEvaluationInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `CDetail` mutation."
input CreateCDetailInput {
  "The `CDetail` to be created by this mutation."
  cDetail: CDetailInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `CFacility` mutation."
input CreateCFacilityInput {
  "The `CFacility` to be created by this mutation."
  cFacility: CFacilityInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `CRiskEvaluation` mutation."
input CreateCRiskEvaluationInput {
  "The `CRiskEvaluation` to be created by this mutation."
  cRiskEvaluation: CRiskEvaluationInput!
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"All input for the create `DDetail` mutation."
input CreateDDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `DDetail` to be created by this mutation."
  dDetail: DDetailInput!
}

"All input for the create `DFacility` mutation."
input CreateDFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `DFacility` to be created by this mutation."
  dFacility: DFacilityInput!
}

"All input for the create `DRiskEvaluation` mutation."
input CreateDRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `DRiskEvaluation` to be created by this mutation."
  dRiskEvaluation: DRiskEvaluationInput!
}

"All input for the create `EDetail` mutation."
input CreateEDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `EDetail` to be created by this mutation."
  eDetail: EDetailInput!
}

"All input for the create `EFacility` mutation."
input CreateEFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `EFacility` to be created by this mutation."
  eFacility: EFacilityInput!
}

"All input for the create `ERiskEvaluation` mutation."
input CreateERiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `ERiskEvaluation` to be created by this mutation."
  eRiskEvaluation: ERiskEvaluationInput!
}

"All input for the create `FDetail` mutation."
input CreateFDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `FDetail` to be created by this mutation."
  fDetail: FDetailInput!
}

"All input for the create `FFacility` mutation."
input CreateFFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `FFacility` to be created by this mutation."
  fFacility: FFacilityInput!
}

"All input for the create `FRiskEvaluation` mutation."
input CreateFRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `FRiskEvaluation` to be created by this mutation."
  fRiskEvaluation: FRiskEvaluationInput!
}

"All input for the create `ViewRegion` mutation."
input CreateViewRegionInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The `ViewRegion` to be created by this mutation."
  viewRegion: ViewRegionInput!
}

"A condition to be used against `DDetail` object types. All fields are tested for equality and combined with a logical ‘and.’"
input DDetailCondition {
  "Checks for equality with the object’s `catImp` field."
  catImp: Selection
  "Checks for equality with the object’s `depStt` field."
  depStt: Selection
  "Checks for equality with the object’s `etcEnv` field."
  etcEnv: Selection
  "Checks for equality with the object’s `etcFsh` field."
  etcFsh: Selection
  "Checks for equality with the object’s `evaInf` field."
  evaInf: Selection
  "Checks for equality with the object’s `evaOpe` field."
  evaOpe: Selection
  "Checks for equality with the object’s `evaOpi` field."
  evaOpi: String
  "Checks for equality with the object’s `evaSur` field."
  evaSur: Selection
  "Checks for equality with the object’s `facHgt` field."
  facHgt: BigFloat
  "Checks for equality with the object’s `facLen` field."
  facLen: BigFloat
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `funMch` field."
  funMch: Selection
  "Checks for equality with the object’s `funStt` field."
  funStt: Selection
  "Checks for equality with the object’s `strBod` field."
  strBod: Selection
  "Checks for equality with the object’s `strFlr` field."
  strFlr: Selection
  "Checks for equality with the object’s `strHzd` field."
  strHzd: Selection
  "Checks for equality with the object’s `strJnt` field."
  strJnt: Selection
  "Checks for equality with the object’s `strWal` field."
  strWal: Selection
}

"An input for mutations affecting `DDetail`"
input DDetailInput {
  catImp: Selection
  depStt: Selection
  etcEnv: Selection
  etcFsh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaSur: Selection
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String!
  funMch: Selection
  funStt: Selection
  strBod: Selection
  strFlr: Selection
  strHzd: Selection
  strJnt: Selection
  strWal: Selection
}

"Represents an update to a `DDetail`. Fields that are set will be updated."
input DDetailPatch {
  catImp: Selection
  depStt: Selection
  etcEnv: Selection
  etcFsh: Selection
  evaInf: Selection
  evaOpe: Selection
  evaOpi: String
  evaSur: Selection
  facHgt: BigFloat
  facLen: BigFloat
  facUid: String
  funMch: Selection
  funStt: Selection
  strBod: Selection
  strFlr: Selection
  strHzd: Selection
  strJnt: Selection
  strWal: Selection
}

"""

A condition to be used against `DFacility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DFacilityCondition {
  "Checks for equality with the object’s `benTxt` field."
  benTxt: String
  "Checks for equality with the object’s `catCde` field."
  catCde: String
  "Checks for equality with the object’s `exmChk` field."
  exmChk: Selection
  "Checks for equality with the object’s `exmNam` field."
  exmNam: String
  "Checks for equality with the object’s `exmOpi` field."
  exmOpi: String
  "Checks for equality with the object’s `exmYmd` field."
  exmYmd: Datetime
  "Checks for equality with the object’s `facAdm` field."
  facAdm: String
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facPid` field."
  facPid: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `funCde` field."
  funCde: [Selection]
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hzdUid` field."
  hzdUid: String
  "Checks for equality with the object’s `hzdYmd` field."
  hzdYmd: Datetime
  "Checks for equality with the object’s `imgFac` field."
  imgFac: JSON
  "Checks for equality with the object’s `imgRep` field."
  imgRep: JSON
  "Checks for equality with the object’s `mngNam` field."
  mngNam: String
  "Checks for equality with the object’s `mngTel` field."
  mngTel: String
  "Checks for equality with the object’s `ownNam` field."
  ownNam: String
  "Checks for equality with the object’s `posCde` field."
  posCde: [Selection]
  "Checks for equality with the object’s `posNam` field."
  posNam: String
  "Checks for equality with the object’s `subCnt` field."
  subCnt: Int
  "Checks for equality with the object’s `subTxt` field."
  subTxt: String
}

"An input for mutations affecting `DFacility`"
input DFacilityInput {
  benTxt: String
  catCde: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String!
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

"Represents an update to a `DFacility`. Fields that are set will be updated."
input DFacilityPatch {
  benTxt: String
  catCde: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdm: String
  facNam: String
  facPid: String
  facUid: String
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  posNam: String
  subCnt: Int
  subTxt: String
}

"""

A condition to be used against `DRiskEvaluation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DRiskEvaluationCondition {
  "Checks for equality with the object’s `column1` field."
  column1: Int
  "Checks for equality with the object’s `column10` field."
  column10: Int
  "Checks for equality with the object’s `column2` field."
  column2: Int
  "Checks for equality with the object’s `column3` field."
  column3: Int
  "Checks for equality with the object’s `column4` field."
  column4: Int
  "Checks for equality with the object’s `column5` field."
  column5: Int
  "Checks for equality with the object’s `column6` field."
  column6: Int
  "Checks for equality with the object’s `column7` field."
  column7: Int
  "Checks for equality with the object’s `column8` field."
  column8: Int
  "Checks for equality with the object’s `column9` field."
  column9: Int
  "Checks for equality with the object’s `evaChk` field."
  evaChk: Selection
  "Checks for equality with the object’s `evaNam` field."
  evaNam: String
  "Checks for equality with the object’s `evaYmd` field."
  evaYmd: Datetime
  "Checks for equality with the object’s `facUid` field."
  facUid: String
}

"An input for mutations affecting `DRiskEvaluation`"
input DRiskEvaluationInput {
  column1: Int
  column10: Int
  column2: Int
  column3: Int
  column4: Int
  column5: Int
  column6: Int
  column7: Int
  column8: Int
  column9: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
}

"Represents an update to a `DRiskEvaluation`. Fields that are set will be updated."
input DRiskEvaluationPatch {
  column1: Int
  column10: Int
  column2: Int
  column3: Int
  column4: Int
  column5: Int
  column6: Int
  column7: Int
  column8: Int
  column9: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String
}

"All input for the `deleteADetailByNodeId` mutation."
input DeleteADetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `ADetail` to be deleted."
  nodeId: ID!
}

"All input for the `deleteADetail` mutation."
input DeleteADetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteAFacilityByNodeId` mutation."
input DeleteAFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `AFacility` to be deleted."
  nodeId: ID!
}

"All input for the `deleteAFacility` mutation."
input DeleteAFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteARiskEvaluationByNodeId` mutation."
input DeleteARiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `ARiskEvaluation` to be deleted."
  nodeId: ID!
}

"All input for the `deleteARiskEvaluation` mutation."
input DeleteARiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteBBasinByNodeId` mutation."
input DeleteBBasinByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BBasin` to be deleted."
  nodeId: ID!
}

"All input for the `deleteBBasin` mutation."
input DeleteBBasinInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  facUml: String!
}

"All input for the `deleteBDetailByNodeId` mutation."
input DeleteBDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BDetail` to be deleted."
  nodeId: ID!
}

"All input for the `deleteBDetail` mutation."
input DeleteBDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteBFacilityByNodeId` mutation."
input DeleteBFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BFacility` to be deleted."
  nodeId: ID!
}

"All input for the `deleteBFacility` mutation."
input DeleteBFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteBRiskEvaluationByNodeId` mutation."
input DeleteBRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BRiskEvaluation` to be deleted."
  nodeId: ID!
}

"All input for the `deleteBRiskEvaluation` mutation."
input DeleteBRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteCDetailByNodeId` mutation."
input DeleteCDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `CDetail` to be deleted."
  nodeId: ID!
}

"All input for the `deleteCDetail` mutation."
input DeleteCDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteCFacilityByNodeId` mutation."
input DeleteCFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `CFacility` to be deleted."
  nodeId: ID!
}

"All input for the `deleteCFacility` mutation."
input DeleteCFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteCRiskEvaluationByNodeId` mutation."
input DeleteCRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `CRiskEvaluation` to be deleted."
  nodeId: ID!
}

"All input for the `deleteCRiskEvaluation` mutation."
input DeleteCRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteDDetailByNodeId` mutation."
input DeleteDDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `DDetail` to be deleted."
  nodeId: ID!
}

"All input for the `deleteDDetail` mutation."
input DeleteDDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteDFacilityByNodeId` mutation."
input DeleteDFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `DFacility` to be deleted."
  nodeId: ID!
}

"All input for the `deleteDFacility` mutation."
input DeleteDFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteDRiskEvaluationByNodeId` mutation."
input DeleteDRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `DRiskEvaluation` to be deleted."
  nodeId: ID!
}

"All input for the `deleteDRiskEvaluation` mutation."
input DeleteDRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteEDetailByNodeId` mutation."
input DeleteEDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `EDetail` to be deleted."
  nodeId: ID!
}

"All input for the `deleteEDetail` mutation."
input DeleteEDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteEFacilityByNodeId` mutation."
input DeleteEFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `EFacility` to be deleted."
  nodeId: ID!
}

"All input for the `deleteEFacility` mutation."
input DeleteEFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteERiskEvaluationByNodeId` mutation."
input DeleteERiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `ERiskEvaluation` to be deleted."
  nodeId: ID!
}

"All input for the `deleteERiskEvaluation` mutation."
input DeleteERiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteFDetailByNodeId` mutation."
input DeleteFDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `FDetail` to be deleted."
  nodeId: ID!
}

"All input for the `deleteFDetail` mutation."
input DeleteFDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteFFacilityByNodeId` mutation."
input DeleteFFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `FFacility` to be deleted."
  nodeId: ID!
}

"All input for the `deleteFFacility` mutation."
input DeleteFFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"All input for the `deleteFRiskEvaluationByNodeId` mutation."
input DeleteFRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `FRiskEvaluation` to be deleted."
  nodeId: ID!
}

"All input for the `deleteFRiskEvaluation` mutation."
input DeleteFRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
}

"A condition to be used against `EDetail` object types. All fields are tested for equality and combined with a logical ‘and.’"
input EDetailCondition {
  "Checks for equality with the object’s `catFunl` field."
  catFunl: Selection
  "Checks for equality with the object’s `catFunm` field."
  catFunm: Selection
  "Checks for equality with the object’s `catFunu` field."
  catFunu: Selection
  "Checks for equality with the object’s `catImpl` field."
  catImpl: Selection
  "Checks for equality with the object’s `catImpm` field."
  catImpm: Selection
  "Checks for equality with the object’s `catImpu` field."
  catImpu: Selection
  "Checks for equality with the object’s `dmgSewl` field."
  dmgSewl: Selection
  "Checks for equality with the object’s `dmgSewm` field."
  dmgSewm: Selection
  "Checks for equality with the object’s `dmgSewu` field."
  dmgSewu: Selection
  "Checks for equality with the object’s `dmgSubl` field."
  dmgSubl: Selection
  "Checks for equality with the object’s `dmgSubm` field."
  dmgSubm: Selection
  "Checks for equality with the object’s `dmgSubu` field."
  dmgSubu: Selection
  "Checks for equality with the object’s `etcPosl` field."
  etcPosl: Selection
  "Checks for equality with the object’s `etcPosm` field."
  etcPosm: Selection
  "Checks for equality with the object’s `etcPosu` field."
  etcPosu: Selection
  "Checks for equality with the object’s `evaInfl` field."
  evaInfl: Selection
  "Checks for equality with the object’s `evaInfm` field."
  evaInfm: Selection
  "Checks for equality with the object’s `evaInfu` field."
  evaInfu: Selection
  "Checks for equality with the object’s `evaOpel` field."
  evaOpel: Selection
  "Checks for equality with the object’s `evaOpem` field."
  evaOpem: Selection
  "Checks for equality with the object’s `evaOpeu` field."
  evaOpeu: Selection
  "Checks for equality with the object’s `evaOpil` field."
  evaOpil: String
  "Checks for equality with the object’s `evaOpim` field."
  evaOpim: String
  "Checks for equality with the object’s `evaOpiu` field."
  evaOpiu: String
  "Checks for equality with the object’s `evaPosl` field."
  evaPosl: Selection
  "Checks for equality with the object’s `evaPosm` field."
  evaPosm: Selection
  "Checks for equality with the object’s `evaPosu` field."
  evaPosu: Selection
  "Checks for equality with the object’s `evaPrxl` field."
  evaPrxl: Selection
  "Checks for equality with the object’s `evaPrxm` field."
  evaPrxm: Selection
  "Checks for equality with the object’s `evaPrxu` field."
  evaPrxu: Selection
  "Checks for equality with the object’s `evaRivl` field."
  evaRivl: Selection
  "Checks for equality with the object’s `evaRivm` field."
  evaRivm: Selection
  "Checks for equality with the object’s `evaRivu` field."
  evaRivu: Selection
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `funFlal` field."
  funFlal: Selection
  "Checks for equality with the object’s `funFlam` field."
  funFlam: Selection
  "Checks for equality with the object’s `funFlau` field."
  funFlau: Selection
  "Checks for equality with the object’s `funPavl` field."
  funPavl: Selection
  "Checks for equality with the object’s `funPavm` field."
  funPavm: Selection
  "Checks for equality with the object’s `funPavu` field."
  funPavu: Selection
  "Checks for equality with the object’s `funUnpl` field."
  funUnpl: Selection
  "Checks for equality with the object’s `funUnpm` field."
  funUnpm: Selection
  "Checks for equality with the object’s `funUnpu` field."
  funUnpu: Selection
  "Checks for equality with the object’s `strPavl` field."
  strPavl: Selection
  "Checks for equality with the object’s `strPavm` field."
  strPavm: Selection
  "Checks for equality with the object’s `strPavu` field."
  strPavu: Selection
  "Checks for equality with the object’s `strSafl` field."
  strSafl: Selection
  "Checks for equality with the object’s `strSafm` field."
  strSafm: Selection
  "Checks for equality with the object’s `strSafu` field."
  strSafu: Selection
  "Checks for equality with the object’s `strShpl` field."
  strShpl: Selection
  "Checks for equality with the object’s `strShpm` field."
  strShpm: Selection
  "Checks for equality with the object’s `strShpu` field."
  strShpu: Selection
  "Checks for equality with the object’s `strSnkl` field."
  strSnkl: Selection
  "Checks for equality with the object’s `strSnkm` field."
  strSnkm: Selection
  "Checks for equality with the object’s `strSnku` field."
  strSnku: Selection
  "Checks for equality with the object’s `strWidl` field."
  strWidl: BigFloat
  "Checks for equality with the object’s `strWidm` field."
  strWidm: BigFloat
  "Checks for equality with the object’s `strWidu` field."
  strWidu: BigFloat
}

"An input for mutations affecting `EDetail`"
input EDetailInput {
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  dmgSewl: Selection
  dmgSewm: Selection
  dmgSewu: Selection
  dmgSubl: Selection
  dmgSubm: Selection
  dmgSubu: Selection
  etcPosl: Selection
  etcPosm: Selection
  etcPosu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPosl: Selection
  evaPosm: Selection
  evaPosu: Selection
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  evaRivl: Selection
  evaRivm: Selection
  evaRivu: Selection
  facUid: String!
  funFlal: Selection
  funFlam: Selection
  funFlau: Selection
  funPavl: Selection
  funPavm: Selection
  funPavu: Selection
  funUnpl: Selection
  funUnpm: Selection
  funUnpu: Selection
  strPavl: Selection
  strPavm: Selection
  strPavu: Selection
  strSafl: Selection
  strSafm: Selection
  strSafu: Selection
  strShpl: Selection
  strShpm: Selection
  strShpu: Selection
  strSnkl: Selection
  strSnkm: Selection
  strSnku: Selection
  strWidl: BigFloat
  strWidm: BigFloat
  strWidu: BigFloat
}

"Represents an update to a `EDetail`. Fields that are set will be updated."
input EDetailPatch {
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  dmgSewl: Selection
  dmgSewm: Selection
  dmgSewu: Selection
  dmgSubl: Selection
  dmgSubm: Selection
  dmgSubu: Selection
  etcPosl: Selection
  etcPosm: Selection
  etcPosu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPosl: Selection
  evaPosm: Selection
  evaPosu: Selection
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  evaRivl: Selection
  evaRivm: Selection
  evaRivu: Selection
  facUid: String
  funFlal: Selection
  funFlam: Selection
  funFlau: Selection
  funPavl: Selection
  funPavm: Selection
  funPavu: Selection
  funUnpl: Selection
  funUnpm: Selection
  funUnpu: Selection
  strPavl: Selection
  strPavm: Selection
  strPavu: Selection
  strSafl: Selection
  strSafm: Selection
  strSafu: Selection
  strShpl: Selection
  strShpm: Selection
  strShpu: Selection
  strSnkl: Selection
  strSnkm: Selection
  strSnku: Selection
  strWidl: BigFloat
  strWidm: BigFloat
  strWidu: BigFloat
}

"""

A condition to be used against `EFacility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EFacilityCondition {
  "Checks for equality with the object’s `benTxt` field."
  benTxt: String
  "Checks for equality with the object’s `exmChk` field."
  exmChk: Selection
  "Checks for equality with the object’s `exmNam` field."
  exmNam: String
  "Checks for equality with the object’s `exmOpi` field."
  exmOpi: String
  "Checks for equality with the object’s `exmYmd` field."
  exmYmd: Datetime
  "Checks for equality with the object’s `facAdl` field."
  facAdl: String
  "Checks for equality with the object’s `facAdm` field."
  facAdm: String
  "Checks for equality with the object’s `facAdu` field."
  facAdu: String
  "Checks for equality with the object’s `facLen` field."
  facLen: BigFloat
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facPid` field."
  facPid: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `facWid` field."
  facWid: BigFloat
  "Checks for equality with the object’s `funCde` field."
  funCde: [Selection]
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hzdUid` field."
  hzdUid: String
  "Checks for equality with the object’s `hzdYmd` field."
  hzdYmd: Datetime
  "Checks for equality with the object’s `imgFac` field."
  imgFac: JSON
  "Checks for equality with the object’s `imgRep` field."
  imgRep: JSON
  "Checks for equality with the object’s `mngNam` field."
  mngNam: String
  "Checks for equality with the object’s `mngTel` field."
  mngTel: String
  "Checks for equality with the object’s `ownNam` field."
  ownNam: String
  "Checks for equality with the object’s `posCde` field."
  posCde: [Selection]
  "Checks for equality with the object’s `subCnt` field."
  subCnt: Int
  "Checks for equality with the object’s `subTxt` field."
  subTxt: String
}

"An input for mutations affecting `EFacility`"
input EFacilityInput {
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String!
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  subCnt: Int
  subTxt: String
}

"Represents an update to a `EFacility`. Fields that are set will be updated."
input EFacilityPatch {
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  subCnt: Int
  subTxt: String
}

"""

A condition to be used against `ERiskEvaluation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ERiskEvaluationCondition {
  "Checks for equality with the object’s `column10L` field."
  column10L: Int
  "Checks for equality with the object’s `column10M` field."
  column10M: Int
  "Checks for equality with the object’s `column10U` field."
  column10U: Int
  "Checks for equality with the object’s `column1L` field."
  column1L: Int
  "Checks for equality with the object’s `column1M` field."
  column1M: Int
  "Checks for equality with the object’s `column1U` field."
  column1U: Int
  "Checks for equality with the object’s `column2L` field."
  column2L: Int
  "Checks for equality with the object’s `column2M` field."
  column2M: Int
  "Checks for equality with the object’s `column2U` field."
  column2U: Int
  "Checks for equality with the object’s `column3L` field."
  column3L: Int
  "Checks for equality with the object’s `column3M` field."
  column3M: Int
  "Checks for equality with the object’s `column3U` field."
  column3U: Int
  "Checks for equality with the object’s `column4L` field."
  column4L: Int
  "Checks for equality with the object’s `column4M` field."
  column4M: Int
  "Checks for equality with the object’s `column4U` field."
  column4U: Int
  "Checks for equality with the object’s `column5L` field."
  column5L: Int
  "Checks for equality with the object’s `column5M` field."
  column5M: Int
  "Checks for equality with the object’s `column5U` field."
  column5U: Int
  "Checks for equality with the object’s `column6L` field."
  column6L: Int
  "Checks for equality with the object’s `column6M` field."
  column6M: Int
  "Checks for equality with the object’s `column6U` field."
  column6U: Int
  "Checks for equality with the object’s `column7L` field."
  column7L: Int
  "Checks for equality with the object’s `column7M` field."
  column7M: Int
  "Checks for equality with the object’s `column7U` field."
  column7U: Int
  "Checks for equality with the object’s `column8L` field."
  column8L: Int
  "Checks for equality with the object’s `column8M` field."
  column8M: Int
  "Checks for equality with the object’s `column8U` field."
  column8U: Int
  "Checks for equality with the object’s `column9L` field."
  column9L: Int
  "Checks for equality with the object’s `column9M` field."
  column9M: Int
  "Checks for equality with the object’s `column9U` field."
  column9U: Int
  "Checks for equality with the object’s `evaChk` field."
  evaChk: Selection
  "Checks for equality with the object’s `evaNam` field."
  evaNam: String
  "Checks for equality with the object’s `evaYmd` field."
  evaYmd: Datetime
  "Checks for equality with the object’s `facUid` field."
  facUid: String
}

"An input for mutations affecting `ERiskEvaluation`"
input ERiskEvaluationInput {
  column10L: Int
  column10M: Int
  column10U: Int
  column1L: Int
  column1M: Int
  column1U: Int
  column2L: Int
  column2M: Int
  column2U: Int
  column3L: Int
  column3M: Int
  column3U: Int
  column4L: Int
  column4M: Int
  column4U: Int
  column5L: Int
  column5M: Int
  column5U: Int
  column6L: Int
  column6M: Int
  column6U: Int
  column7L: Int
  column7M: Int
  column7U: Int
  column8L: Int
  column8M: Int
  column8U: Int
  column9L: Int
  column9M: Int
  column9U: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
}

"Represents an update to a `ERiskEvaluation`. Fields that are set will be updated."
input ERiskEvaluationPatch {
  column10L: Int
  column10M: Int
  column10U: Int
  column1L: Int
  column1M: Int
  column1U: Int
  column2L: Int
  column2M: Int
  column2U: Int
  column3L: Int
  column3M: Int
  column3U: Int
  column4L: Int
  column4M: Int
  column4U: Int
  column5L: Int
  column5M: Int
  column5U: Int
  column6L: Int
  column6M: Int
  column6U: Int
  column7L: Int
  column7M: Int
  column7U: Int
  column8L: Int
  column8M: Int
  column8U: Int
  column9L: Int
  column9M: Int
  column9U: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String
}

"A condition to be used against `FDetail` object types. All fields are tested for equality and combined with a logical ‘and.’"
input FDetailCondition {
  "Checks for equality with the object’s `catFunl` field."
  catFunl: Selection
  "Checks for equality with the object’s `catFunm` field."
  catFunm: Selection
  "Checks for equality with the object’s `catFunu` field."
  catFunu: Selection
  "Checks for equality with the object’s `catImpl` field."
  catImpl: Selection
  "Checks for equality with the object’s `catImpm` field."
  catImpm: Selection
  "Checks for equality with the object’s `catImpu` field."
  catImpu: Selection
  "Checks for equality with the object’s `dmgSewl` field."
  dmgSewl: Selection
  "Checks for equality with the object’s `dmgSewm` field."
  dmgSewm: Selection
  "Checks for equality with the object’s `dmgSewu` field."
  dmgSewu: Selection
  "Checks for equality with the object’s `dmgSubl` field."
  dmgSubl: Selection
  "Checks for equality with the object’s `dmgSubm` field."
  dmgSubm: Selection
  "Checks for equality with the object’s `dmgSubu` field."
  dmgSubu: Selection
  "Checks for equality with the object’s `etcPosl` field."
  etcPosl: Selection
  "Checks for equality with the object’s `etcPosm` field."
  etcPosm: Selection
  "Checks for equality with the object’s `etcPosu` field."
  etcPosu: Selection
  "Checks for equality with the object’s `evaInfl` field."
  evaInfl: Selection
  "Checks for equality with the object’s `evaInfm` field."
  evaInfm: Selection
  "Checks for equality with the object’s `evaInfu` field."
  evaInfu: Selection
  "Checks for equality with the object’s `evaOpel` field."
  evaOpel: Selection
  "Checks for equality with the object’s `evaOpem` field."
  evaOpem: Selection
  "Checks for equality with the object’s `evaOpeu` field."
  evaOpeu: Selection
  "Checks for equality with the object’s `evaOpil` field."
  evaOpil: String
  "Checks for equality with the object’s `evaOpim` field."
  evaOpim: String
  "Checks for equality with the object’s `evaOpiu` field."
  evaOpiu: String
  "Checks for equality with the object’s `evaPosl` field."
  evaPosl: Selection
  "Checks for equality with the object’s `evaPosm` field."
  evaPosm: Selection
  "Checks for equality with the object’s `evaPosu` field."
  evaPosu: Selection
  "Checks for equality with the object’s `evaPrxl` field."
  evaPrxl: Selection
  "Checks for equality with the object’s `evaPrxm` field."
  evaPrxm: Selection
  "Checks for equality with the object’s `evaPrxu` field."
  evaPrxu: Selection
  "Checks for equality with the object’s `evaRivl` field."
  evaRivl: Selection
  "Checks for equality with the object’s `evaRivm` field."
  evaRivm: Selection
  "Checks for equality with the object’s `evaRivu` field."
  evaRivu: Selection
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `funFlal` field."
  funFlal: Selection
  "Checks for equality with the object’s `funFlam` field."
  funFlam: Selection
  "Checks for equality with the object’s `funFlau` field."
  funFlau: Selection
  "Checks for equality with the object’s `funPavl` field."
  funPavl: Selection
  "Checks for equality with the object’s `funPavm` field."
  funPavm: Selection
  "Checks for equality with the object’s `funPavu` field."
  funPavu: Selection
  "Checks for equality with the object’s `funUnpl` field."
  funUnpl: Selection
  "Checks for equality with the object’s `funUnpm` field."
  funUnpm: Selection
  "Checks for equality with the object’s `funUnpu` field."
  funUnpu: Selection
  "Checks for equality with the object’s `strPavl` field."
  strPavl: Selection
  "Checks for equality with the object’s `strPavm` field."
  strPavm: Selection
  "Checks for equality with the object’s `strPavu` field."
  strPavu: Selection
  "Checks for equality with the object’s `strSafl` field."
  strSafl: Selection
  "Checks for equality with the object’s `strSafm` field."
  strSafm: Selection
  "Checks for equality with the object’s `strSafu` field."
  strSafu: Selection
  "Checks for equality with the object’s `strShpl` field."
  strShpl: Selection
  "Checks for equality with the object’s `strShpm` field."
  strShpm: Selection
  "Checks for equality with the object’s `strShpu` field."
  strShpu: Selection
  "Checks for equality with the object’s `strSnkl` field."
  strSnkl: Selection
  "Checks for equality with the object’s `strSnkm` field."
  strSnkm: Selection
  "Checks for equality with the object’s `strSnku` field."
  strSnku: Selection
  "Checks for equality with the object’s `strWidl` field."
  strWidl: BigFloat
  "Checks for equality with the object’s `strWidm` field."
  strWidm: BigFloat
  "Checks for equality with the object’s `strWidu` field."
  strWidu: BigFloat
}

"An input for mutations affecting `FDetail`"
input FDetailInput {
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  dmgSewl: Selection
  dmgSewm: Selection
  dmgSewu: Selection
  dmgSubl: Selection
  dmgSubm: Selection
  dmgSubu: Selection
  etcPosl: Selection
  etcPosm: Selection
  etcPosu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPosl: Selection
  evaPosm: Selection
  evaPosu: Selection
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  evaRivl: Selection
  evaRivm: Selection
  evaRivu: Selection
  facUid: String!
  funFlal: Selection
  funFlam: Selection
  funFlau: Selection
  funPavl: Selection
  funPavm: Selection
  funPavu: Selection
  funUnpl: Selection
  funUnpm: Selection
  funUnpu: Selection
  strPavl: Selection
  strPavm: Selection
  strPavu: Selection
  strSafl: Selection
  strSafm: Selection
  strSafu: Selection
  strShpl: Selection
  strShpm: Selection
  strShpu: Selection
  strSnkl: Selection
  strSnkm: Selection
  strSnku: Selection
  strWidl: BigFloat
  strWidm: BigFloat
  strWidu: BigFloat
}

"Represents an update to a `FDetail`. Fields that are set will be updated."
input FDetailPatch {
  catFunl: Selection
  catFunm: Selection
  catFunu: Selection
  catImpl: Selection
  catImpm: Selection
  catImpu: Selection
  dmgSewl: Selection
  dmgSewm: Selection
  dmgSewu: Selection
  dmgSubl: Selection
  dmgSubm: Selection
  dmgSubu: Selection
  etcPosl: Selection
  etcPosm: Selection
  etcPosu: Selection
  evaInfl: Selection
  evaInfm: Selection
  evaInfu: Selection
  evaOpel: Selection
  evaOpem: Selection
  evaOpeu: Selection
  evaOpil: String
  evaOpim: String
  evaOpiu: String
  evaPosl: Selection
  evaPosm: Selection
  evaPosu: Selection
  evaPrxl: Selection
  evaPrxm: Selection
  evaPrxu: Selection
  evaRivl: Selection
  evaRivm: Selection
  evaRivu: Selection
  facUid: String
  funFlal: Selection
  funFlam: Selection
  funFlau: Selection
  funPavl: Selection
  funPavm: Selection
  funPavu: Selection
  funUnpl: Selection
  funUnpm: Selection
  funUnpu: Selection
  strPavl: Selection
  strPavm: Selection
  strPavu: Selection
  strSafl: Selection
  strSafm: Selection
  strSafu: Selection
  strShpl: Selection
  strShpm: Selection
  strShpu: Selection
  strSnkl: Selection
  strSnkm: Selection
  strSnku: Selection
  strWidl: BigFloat
  strWidm: BigFloat
  strWidu: BigFloat
}

"""

A condition to be used against `FFacility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FFacilityCondition {
  "Checks for equality with the object’s `benTxt` field."
  benTxt: String
  "Checks for equality with the object’s `exmChk` field."
  exmChk: Selection
  "Checks for equality with the object’s `exmNam` field."
  exmNam: String
  "Checks for equality with the object’s `exmOpi` field."
  exmOpi: String
  "Checks for equality with the object’s `exmYmd` field."
  exmYmd: Datetime
  "Checks for equality with the object’s `facAdl` field."
  facAdl: String
  "Checks for equality with the object’s `facAdm` field."
  facAdm: String
  "Checks for equality with the object’s `facAdu` field."
  facAdu: String
  "Checks for equality with the object’s `facLen` field."
  facLen: BigFloat
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facPid` field."
  facPid: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `facWid` field."
  facWid: BigFloat
  "Checks for equality with the object’s `funCde` field."
  funCde: [Selection]
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hzdUid` field."
  hzdUid: String
  "Checks for equality with the object’s `hzdYmd` field."
  hzdYmd: Datetime
  "Checks for equality with the object’s `imgFac` field."
  imgFac: JSON
  "Checks for equality with the object’s `imgRep` field."
  imgRep: JSON
  "Checks for equality with the object’s `mngNam` field."
  mngNam: String
  "Checks for equality with the object’s `mngTel` field."
  mngTel: String
  "Checks for equality with the object’s `ownNam` field."
  ownNam: String
  "Checks for equality with the object’s `posCde` field."
  posCde: [Selection]
  "Checks for equality with the object’s `subCnt` field."
  subCnt: Int
  "Checks for equality with the object’s `subTxt` field."
  subTxt: String
}

"An input for mutations affecting `FFacility`"
input FFacilityInput {
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String!
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  subCnt: Int
  subTxt: String
}

"Represents an update to a `FFacility`. Fields that are set will be updated."
input FFacilityPatch {
  benTxt: String
  exmChk: Selection
  exmNam: String
  exmOpi: String
  exmYmd: Datetime
  facAdl: String
  facAdm: String
  facAdu: String
  facLen: BigFloat
  facNam: String
  facPid: String
  facUid: String
  facWid: BigFloat
  funCde: [Selection]
  geom: String
  hzdUid: String
  hzdYmd: Datetime
  imgFac: JSON
  imgRep: JSON
  mngNam: String
  mngTel: String
  ownNam: String
  posCde: [Selection]
  subCnt: Int
  subTxt: String
}

"""

A condition to be used against `FRiskEvaluation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FRiskEvaluationCondition {
  "Checks for equality with the object’s `column10L` field."
  column10L: Int
  "Checks for equality with the object’s `column10M` field."
  column10M: Int
  "Checks for equality with the object’s `column10U` field."
  column10U: Int
  "Checks for equality with the object’s `column1L` field."
  column1L: Int
  "Checks for equality with the object’s `column1M` field."
  column1M: Int
  "Checks for equality with the object’s `column1U` field."
  column1U: Int
  "Checks for equality with the object’s `column2L` field."
  column2L: Int
  "Checks for equality with the object’s `column2M` field."
  column2M: Int
  "Checks for equality with the object’s `column2U` field."
  column2U: Int
  "Checks for equality with the object’s `column3L` field."
  column3L: Int
  "Checks for equality with the object’s `column3M` field."
  column3M: Int
  "Checks for equality with the object’s `column3U` field."
  column3U: Int
  "Checks for equality with the object’s `column4L` field."
  column4L: Int
  "Checks for equality with the object’s `column4M` field."
  column4M: Int
  "Checks for equality with the object’s `column4U` field."
  column4U: Int
  "Checks for equality with the object’s `column5L` field."
  column5L: Int
  "Checks for equality with the object’s `column5M` field."
  column5M: Int
  "Checks for equality with the object’s `column5U` field."
  column5U: Int
  "Checks for equality with the object’s `column6L` field."
  column6L: Int
  "Checks for equality with the object’s `column6M` field."
  column6M: Int
  "Checks for equality with the object’s `column6U` field."
  column6U: Int
  "Checks for equality with the object’s `column7L` field."
  column7L: Int
  "Checks for equality with the object’s `column7M` field."
  column7M: Int
  "Checks for equality with the object’s `column7U` field."
  column7U: Int
  "Checks for equality with the object’s `column8L` field."
  column8L: Int
  "Checks for equality with the object’s `column8M` field."
  column8M: Int
  "Checks for equality with the object’s `column8U` field."
  column8U: Int
  "Checks for equality with the object’s `column9L` field."
  column9L: Int
  "Checks for equality with the object’s `column9M` field."
  column9M: Int
  "Checks for equality with the object’s `column9U` field."
  column9U: Int
  "Checks for equality with the object’s `evaChk` field."
  evaChk: Selection
  "Checks for equality with the object’s `evaNam` field."
  evaNam: String
  "Checks for equality with the object’s `evaYmd` field."
  evaYmd: Datetime
  "Checks for equality with the object’s `facUid` field."
  facUid: String
}

"An input for mutations affecting `FRiskEvaluation`"
input FRiskEvaluationInput {
  column10L: Int
  column10M: Int
  column10U: Int
  column1L: Int
  column1M: Int
  column1U: Int
  column2L: Int
  column2M: Int
  column2U: Int
  column3L: Int
  column3M: Int
  column3U: Int
  column4L: Int
  column4M: Int
  column4U: Int
  column5L: Int
  column5M: Int
  column5U: Int
  column6L: Int
  column6M: Int
  column6U: Int
  column7L: Int
  column7M: Int
  column7U: Int
  column8L: Int
  column8M: Int
  column8U: Int
  column9L: Int
  column9M: Int
  column9U: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String!
}

"Represents an update to a `FRiskEvaluation`. Fields that are set will be updated."
input FRiskEvaluationPatch {
  column10L: Int
  column10M: Int
  column10U: Int
  column1L: Int
  column1M: Int
  column1U: Int
  column2L: Int
  column2M: Int
  column2U: Int
  column3L: Int
  column3M: Int
  column3U: Int
  column4L: Int
  column4M: Int
  column4U: Int
  column5L: Int
  column5M: Int
  column5U: Int
  column6L: Int
  column6M: Int
  column6U: Int
  column7L: Int
  column7M: Int
  column7U: Int
  column8L: Int
  column8M: Int
  column8U: Int
  column9L: Int
  column9M: Int
  column9U: Int
  evaChk: Selection
  evaNam: String
  evaYmd: Datetime
  facUid: String
}

"All input for the `updateADetailByNodeId` mutation."
input UpdateADetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `ADetail` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `ADetail` being updated."
  patch: ADetailPatch!
}

"All input for the `updateADetail` mutation."
input UpdateADetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `ADetail` being updated."
  patch: ADetailPatch!
}

"All input for the `updateAFacilityByNodeId` mutation."
input UpdateAFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `AFacility` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `AFacility` being updated."
  patch: AFacilityPatch!
}

"All input for the `updateAFacility` mutation."
input UpdateAFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `AFacility` being updated."
  patch: AFacilityPatch!
}

"All input for the `updateARiskEvaluationByNodeId` mutation."
input UpdateARiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `ARiskEvaluation` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `ARiskEvaluation` being updated."
  patch: ARiskEvaluationPatch!
}

"All input for the `updateARiskEvaluation` mutation."
input UpdateARiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `ARiskEvaluation` being updated."
  patch: ARiskEvaluationPatch!
}

"All input for the `updateBBasinByNodeId` mutation."
input UpdateBBasinByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BBasin` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `BBasin` being updated."
  patch: BBasinPatch!
}

"All input for the `updateBBasin` mutation."
input UpdateBBasinInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  facUml: String!
  "An object where the defined keys will be set on the `BBasin` being updated."
  patch: BBasinPatch!
}

"All input for the `updateBDetailByNodeId` mutation."
input UpdateBDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BDetail` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `BDetail` being updated."
  patch: BDetailPatch!
}

"All input for the `updateBDetail` mutation."
input UpdateBDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `BDetail` being updated."
  patch: BDetailPatch!
}

"All input for the `updateBFacilityByNodeId` mutation."
input UpdateBFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BFacility` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `BFacility` being updated."
  patch: BFacilityPatch!
}

"All input for the `updateBFacility` mutation."
input UpdateBFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `BFacility` being updated."
  patch: BFacilityPatch!
}

"All input for the `updateBRiskEvaluationByNodeId` mutation."
input UpdateBRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `BRiskEvaluation` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `BRiskEvaluation` being updated."
  patch: BRiskEvaluationPatch!
}

"All input for the `updateBRiskEvaluation` mutation."
input UpdateBRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `BRiskEvaluation` being updated."
  patch: BRiskEvaluationPatch!
}

"All input for the `updateCDetailByNodeId` mutation."
input UpdateCDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `CDetail` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `CDetail` being updated."
  patch: CDetailPatch!
}

"All input for the `updateCDetail` mutation."
input UpdateCDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `CDetail` being updated."
  patch: CDetailPatch!
}

"All input for the `updateCFacilityByNodeId` mutation."
input UpdateCFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `CFacility` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `CFacility` being updated."
  patch: CFacilityPatch!
}

"All input for the `updateCFacility` mutation."
input UpdateCFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `CFacility` being updated."
  patch: CFacilityPatch!
}

"All input for the `updateCRiskEvaluationByNodeId` mutation."
input UpdateCRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `CRiskEvaluation` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `CRiskEvaluation` being updated."
  patch: CRiskEvaluationPatch!
}

"All input for the `updateCRiskEvaluation` mutation."
input UpdateCRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `CRiskEvaluation` being updated."
  patch: CRiskEvaluationPatch!
}

"All input for the `updateDDetailByNodeId` mutation."
input UpdateDDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `DDetail` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `DDetail` being updated."
  patch: DDetailPatch!
}

"All input for the `updateDDetail` mutation."
input UpdateDDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `DDetail` being updated."
  patch: DDetailPatch!
}

"All input for the `updateDFacilityByNodeId` mutation."
input UpdateDFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `DFacility` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `DFacility` being updated."
  patch: DFacilityPatch!
}

"All input for the `updateDFacility` mutation."
input UpdateDFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `DFacility` being updated."
  patch: DFacilityPatch!
}

"All input for the `updateDRiskEvaluationByNodeId` mutation."
input UpdateDRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `DRiskEvaluation` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `DRiskEvaluation` being updated."
  patch: DRiskEvaluationPatch!
}

"All input for the `updateDRiskEvaluation` mutation."
input UpdateDRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `DRiskEvaluation` being updated."
  patch: DRiskEvaluationPatch!
}

"All input for the `updateEDetailByNodeId` mutation."
input UpdateEDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `EDetail` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `EDetail` being updated."
  patch: EDetailPatch!
}

"All input for the `updateEDetail` mutation."
input UpdateEDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `EDetail` being updated."
  patch: EDetailPatch!
}

"All input for the `updateEFacilityByNodeId` mutation."
input UpdateEFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `EFacility` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `EFacility` being updated."
  patch: EFacilityPatch!
}

"All input for the `updateEFacility` mutation."
input UpdateEFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `EFacility` being updated."
  patch: EFacilityPatch!
}

"All input for the `updateERiskEvaluationByNodeId` mutation."
input UpdateERiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `ERiskEvaluation` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `ERiskEvaluation` being updated."
  patch: ERiskEvaluationPatch!
}

"All input for the `updateERiskEvaluation` mutation."
input UpdateERiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `ERiskEvaluation` being updated."
  patch: ERiskEvaluationPatch!
}

"All input for the `updateFDetailByNodeId` mutation."
input UpdateFDetailByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `FDetail` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `FDetail` being updated."
  patch: FDetailPatch!
}

"All input for the `updateFDetail` mutation."
input UpdateFDetailInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `FDetail` being updated."
  patch: FDetailPatch!
}

"All input for the `updateFFacilityByNodeId` mutation."
input UpdateFFacilityByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `FFacility` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `FFacility` being updated."
  patch: FFacilityPatch!
}

"All input for the `updateFFacility` mutation."
input UpdateFFacilityInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `FFacility` being updated."
  patch: FFacilityPatch!
}

"All input for the `updateFRiskEvaluationByNodeId` mutation."
input UpdateFRiskEvaluationByNodeIdInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  "The globally unique `ID` which will identify a single `FRiskEvaluation` to be updated."
  nodeId: ID!
  "An object where the defined keys will be set on the `FRiskEvaluation` being updated."
  patch: FRiskEvaluationPatch!
}

"All input for the `updateFRiskEvaluation` mutation."
input UpdateFRiskEvaluationInput {
  """

  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facUid: String!
  "An object where the defined keys will be set on the `FRiskEvaluation` being updated."
  patch: FRiskEvaluationPatch!
}

"""

A condition to be used against `ViewCadaster` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ViewCadasterCondition {
  "Checks for equality with the object’s `bjdCde` field."
  bjdCde: String
  "Checks for equality with the object’s `bjdNam` field."
  bjdNam: String
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hjdNam` field."
  hjdNam: String
  "Checks for equality with the object’s `jibun` field."
  jibun: String
  "Checks for equality with the object’s `pnu` field."
  pnu: String
}

"""

A condition to be used against `ViewFacility` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ViewFacilityCondition {
  "Checks for equality with the object’s `bjdCde` field."
  bjdCde: String
  "Checks for equality with the object’s `bjdNam` field."
  bjdNam: String
  "Checks for equality with the object’s `exmChk` field."
  exmChk: Selection
  "Checks for equality with the object’s `exmYmd` field."
  exmYmd: Datetime
  "Checks for equality with the object’s `facAdm` field."
  facAdm: String
  "Checks for equality with the object’s `facNam` field."
  facNam: String
  "Checks for equality with the object’s `facTyp` field."
  facTyp: String
  "Checks for equality with the object’s `facUid` field."
  facUid: String
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hjdNam` field."
  hjdNam: String
  "Checks for equality with the object’s `typNam` field."
  typNam: String
}

"""

A condition to be used against `ViewRegion` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ViewRegionCondition {
  "Checks for equality with the object’s `bjdCde` field."
  bjdCde: String
  "Checks for equality with the object’s `bjdNam` field."
  bjdNam: String
  "Checks for equality with the object’s `geom` field."
  geom: String
  "Checks for equality with the object’s `hjdNam` field."
  hjdNam: String
}

"An input for mutations affecting `ViewRegion`"
input ViewRegionInput {
  bjdCde: String
  bjdNam: String
  geom: String
  hjdNam: String
}
